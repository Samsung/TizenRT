/*
 * Copyright (c) 2024 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef ONERT_MICRO_TEST_MODELS_FLOAT_L2_NORMALIZATION_KERNEL_H
#define ONERT_MICRO_TEST_MODELS_FLOAT_L2_NORMALIZATION_KERNEL_H

#include "TestDataL2NormalizeBase.h"

namespace onert_micro
{
namespace test_model
{
namespace l2_normalization_float
{
/*
 * L2Normalization Kernel:
 *
 *      Input(1, 4, 4, 3)
 *            |
 *      L2Normalization
 *            |
 *      Output(1, 4, 4, 3)
 */
const unsigned char test_kernel_model_circle[] = {
  0x18, 0x00, 0x00, 0x00, 0x43, 0x49, 0x52, 0x30, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x08, 0x00, 0x10, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8c, 0xff, 0xff, 0xff,
  0x90, 0xff, 0xff, 0xff, 0x94, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x04, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xd4, 0xff, 0xff, 0xff, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x6f, 0x66, 0x6d, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x10, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x69, 0x66, 0x6d, 0x31, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x11, 0x00, 0x00, 0x00,
  0x4f, 0x4e, 0x45, 0x2d, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x32, 0x63, 0x69, 0x72, 0x63, 0x6c,
  0x65, 0x00, 0x00, 0x00};

const std::vector<float> input_data = {
  9.992603,  8.346985,  22.960445, 45.584763, 26.916512, 33.256886, 12.787039, 40.30215,
  32.26641,  13.645262, 36.445396, 33.06842,  37.449368, 14.05669,  17.87454,  7.8050013,
  5.6068754, 17.868938, 40.134842, 24.222584, 42.0985,   26.406887, 11.48271,  33.00633,
  39.676426, 46.740967, 38.20928,  45.924362, 39.70501,  32.05231,  41.742085, 29.257357,
  42.27183,  35.843292, 28.056007, 31.480331, 34.84266,  34.666496, 26.273453, 33.72813,
  23.426928, 14.348057, 52.57121,  17.464836, 33.1741,   29.476301, 22.09747,  32.685722};

const std::vector<float> reference_output_data = {
  0.3785766,  0.31623122, 0.86987215, 0.72914726, 0.4305408,  0.53195775, 0.24041508, 0.75773954,
  0.60665584, 0.26719585, 0.71365863, 0.64753205, 0.8547623,  0.32083663, 0.40797707, 0.38468635,
  0.27634698, 0.8807093,  0.63699496, 0.3844456,  0.66816086, 0.6028728,  0.2621518,  0.7535389,
  0.54921657, 0.6470067,  0.5289077,  0.66895926, 0.5783648,  0.46689144, 0.6303393,  0.4418098,
  0.6383389,  0.6476525,  0.506944,   0.56881815, 0.6251807,  0.6220198,  0.47142372, 0.77535427,
  0.53854656, 0.32983825, 0.81417507, 0.2704795,  0.5137703,  0.59851044, 0.44868472, 0.6636771};

} // namespace l2_normalization_float

class TestDataFloatL2Normalization : public TestDataL2NormalizationBase<float>
{
public:
  TestDataFloatL2Normalization()
  {
    _input_data = l2_normalization_float::input_data;
    _reference_output_data = l2_normalization_float::reference_output_data;
    _test_kernel_model_circle = l2_normalization_float::test_kernel_model_circle;
  }

  ~TestDataFloatL2Normalization() override = default;
};

} // namespace test_model
} // namespace onert_micro

#endif // ONERT_MICRO_TEST_MODELS_FLOAT_L2_NORMALIZATION_KERNEL_H
