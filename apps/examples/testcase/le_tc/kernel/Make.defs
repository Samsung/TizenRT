###########################################################################
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################

############################################################################
# apps/examples/testcase/kernel/Make.defs
#
#   Copyright (C) 2014 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

ifeq ($(CONFIG_EXAMPLES_TESTCASE_KERNEL),y)
CSRCS += kernel_tc_main.c
ifeq ($(CONFIG_TC_KERNEL_CLOCK),y)
  CSRCS += tc_clock.c
endif
ifeq ($(CONFIG_TC_KERNEL_ENVIRON),y)
  CSRCS += tc_environ.c
endif
ifeq ($(CONFIG_TC_KERNEL_ERRNO),y)
  CSRCS += tc_errno.c
endif
ifeq ($(CONFIG_TC_KERNEL_GROUP),y)
  CSRCS += tc_group.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_FIXEDMATH),y)
  CSRCS += tc_libc_fixedmath.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_INTTYPES),y)
  CSRCS += tc_libc_inttypes.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_LIBGEN),y)
  CSRCS += tc_libc_libgen.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_MATH),y)
  CSRCS += tc_libc_math.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_MISC),y)
  CSRCS += tc_libc_misc.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_PTHREAD),y)
  CSRCS += tc_libc_pthread.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_QUEUE),y)
  CSRCS += tc_libc_queue.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_SCHED),y)
  CSRCS += tc_libc_sched.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_SEMAPHORE),y)
  CSRCS += tc_libc_semaphore.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_SIGNAL),y)
  CSRCS += tc_libc_signal.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_STDIO),y)
  CSRCS += tc_libc_stdio.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_STDLIB),y)
  CSRCS += tc_libc_stdlib.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_STRING),y)
  CSRCS += tc_libc_string.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_TIMER),y)
  CSRCS += tc_libc_timer.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_UNISTD),y)
  CSRCS += tc_libc_unistd.c
endif
ifeq ($(CONFIG_TC_KERNEL_LIBC_SYSLOG),y)
  CSRCS += tc_libc_syslog.c
endif
ifeq ($(CONFIG_TC_KERNEL_MQUEUE),y)
  CSRCS += tc_mqueue.c
endif
ifeq ($(CONFIG_TC_KERNEL_PTHREAD),y)
  CSRCS += tc_pthread.c
endif
ifeq ($(CONFIG_TC_KERNEL_SEMAPHORE),y)
  CSRCS += tc_semaphore.c
endif
ifeq ($(CONFIG_TC_KERNEL_SCHED),y)
  CSRCS += tc_sched.c
endif
ifeq ($(CONFIG_TC_KERNEL_SIGNAL),y)
  CSRCS += tc_signal.c
endif
ifeq ($(CONFIG_TC_KERNEL_SYSTEM_DEBUG),y)
  CSRCS += tc_sysdbg.c
endif
ifeq ($(CONFIG_TC_KERNEL_TASK),y)
  CSRCS += tc_task.c
endif
ifeq ($(CONFIG_TC_KERNEL_TERMIOS),y)
  CSRCS += tc_termios.c
endif
ifeq ($(CONFIG_TC_KERNEL_TIMER),y)
  CSRCS += tc_timer.c
endif
ifeq ($(CONFIG_TC_KERNEL_UMM_HEAP),y)
  CSRCS += tc_umm_heap.c
endif
ifeq ($(CONFIG_TC_KERNEL_TASH_HEAPINFO),y)
  CSRCS += tc_tash_heapinfo.c
endif
ifeq ($(CONFIG_TC_KERNEL_TASH_STACKMONITOR),y)
  CSRCS += tc_tash_stackmonitor.c
endif
ifeq ($(CONFIG_TC_KERNEL_WORK_QUEUE),y)
  CSRCS += tc_wqueue.c
endif
ifeq ($(CONFIG_TC_KERNEL_MEMORY_SAFETY),y)
  CSRCS += tc_memory_safety.c
endif
ifeq ($(CONFIG_TC_KERNEL_IRQ),y)
  CSRCS += tc_irq.c
endif
ifeq ($(CONFIG_ITC_KERNEL_ENVIRON),y)
  CSRCS += itc_environ.c
endif
ifeq ($(CONFIG_ITC_KERNEL_LIBC_PTHREAD),y)
  CSRCS += itc_libc_pthread.c
endif
ifeq ($(CONFIG_ITC_KERNEL_LIBC_SEMAPHORE),y)
  CSRCS += itc_libc_semaphore.c
endif
ifeq ($(CONFIG_ITC_KERNEL_SEMAPHORE),y)
  CSRCS += itc_semaphore.c
endif
ifeq ($(CONFIG_ITC_KERNEL_SCHED),y)
  CSRCS += itc_sched.c
endif
ifeq ($(CONFIG_ITC_KERNEL_TIMER),y)
  CSRCS += itc_timer.c
endif
ifeq ($(CONFIG_ITC_KERNEL_PTHREAD),y)
  CSRCS += itc_pthread.c
endif

# Include kernel build support

DEPPATH += --dep-path le_tc/kernel
VPATH += :le_tc/kernel
endif
