###########################################################################
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################
############################################################################
# Makefile.win
#
#   Copyright (C) 2012 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

TOPDIR := ${shell echo %CD%}
-include $(TOPDIR)\.config
-include $(TOPDIR)\tools\Config.mk
-include $(TOPDIR)\Make.defs

# Control build verbosity
#
#  V=1,2: Enable echo of commands
#  V=2:   Enable bug/verbose options in tools and scripts

ifeq ($(V),1)
export Q :=
else
ifeq ($(V),2)
export Q :=
else
export Q := @
endif
endif

# This define is passed as EXTRADEFINES for kernel-mode builds.  It is also passed
# during PASS1 (but not PASS2) context and depend targets.

KDEFINE = ${shell $(TOPDIR)\tools\define.bat "$(CC)" __KERNEL__}

# Process architecture and board-specific directories

ARCH_DIR = arch\$(CONFIG_ARCH)
ARCH_SRC = $(ARCH_DIR)\src
ARCH_INC = $(ARCH_DIR)\include

ifeq ($(CONFIG_ARCH_BOARD_CUSTOM),y)
  BOARD_DIR = $(CONFIG_ARCH_BOARD_CUSTOM_DIR)
else
  BOARD_DIR = board\$(CONFIG_ARCH_BOARD)
endif

# CONFIG_APPS_DIR can be over-ridden from the command line or in the .config file.
# The default value of CONFIG_APPS_DIR is ..\apps.  Ultimately, the application
# will be built if APPDIR is defined.  APPDIR will be defined if a directory containing
# a Makefile is found at the path provided by CONFIG_APPS_DIR

ifeq ($(CONFIG_APPS_DIR),)
CONFIG_APPS_DIR = ..\apps
endif
APPDIR := ${shell if exist "$(CONFIG_APPS_DIR)\Makefile" echo $(CONFIG_APPS_DIR)}

CONFIG_EXTERNAL_DIR = ..\external
EXTDIR := ${shell if exist "$(CONFIG_EXTERNAL_DIR)\Makefile" echo $(CONFIG_EXTERNAL_DIR)}

BUILD_DIR = ..\build
OUTPUT_DIR = $(BUILD_DIR)\output
LIBRARIES_DIR = $(OUTPUT_DIR)\libraries
OUTBIN_DIR = $(OUTPUT_DIR)\bin
LIB_DIR = ..\lib

# Add-on directories.  These may or may not be in place in the
# TinyAra source tree (they must be specifically installed)
#
# TINYARA_ADDONS is the list of directories built into the TinyAra kernel.
# USER_ADDONS is the list of directories that will be built into the user
#   application
#
# FSDIRS depend on file descriptor support; NONFSDIRS do not (except for parts
#   of FSDIRS).  We will exclude FSDIRS from the build if file descriptor
#   support is disabled
# CONTEXTDIRS include directories that have special, one-time pre-build
#   requirements.  Normally this includes things like auto-generation of
#   configuration specific files or creation of configurable symbolic links
# USERDIRS - When TinyAra is build is a monolithic kernel, this provides the
#   list of directories that must be built
# OTHERDIRS - These are directories that are not built but probably should
#   be cleaned to prevent garbage from collecting in them when changing
#   configurations.
#
# CLEANDIRS are the directories that will clean in.  These are
#   all directories that we know about.
# KERNDEPDIRS are the directories in which we will build target dependencies.
#   If TinyAra and applications are built separately (CONFIG_BUILD_PROTECTED or
#   CONFIG_BUILD_KERNEL), then this holds only the directories containing
#   kernel files.
# USERDEPDIRS. If TinyAra and applications are built separately (CONFIG_BUILD_PROTECTED),
#   then this holds only the directories containing user files. If
#   CONFIG_BUILD_KERNEL is selected, then applications are not build at all.

include Directories.mk

#
# Extra objects used in the final link.
#
# Pass 1 1ncremental (relative) link objects should be put into the
# processor-specific source directory (where other link objects will
# be created).  If the pass1 object is an archive, it could go anywhere.

ifeq ($(CONFIG_BUILD_2PASS),y)
EXTRA_OBJS += $(CONFIG_PASS1_OBJECT)
endif

# Library build selections
#
# TINYARALIBS is the list of TinyAra libraries that is passed to the
#   processor-specific Makefile to build the final TinyAra target.
#   Libraries in FSDIRS are excluded if file descriptor support
#   is disabled.
# USERLIBS is the list of libraries used to build the final user-space
#   application
# EXPORTLIBS is the list of libraries that should be exported by
#   'make export' is

ifeq ($(CONFIG_BUILD_PROTECTED),y)
include ProtectedLibs.mk
else
ifeq ($(CONFIG_BUILD_KERNEL),y)
include KernelLibs.mk
else
include FlatLibs.mk
endif
endif

# LINKLIBS derives from TINYARALIBS and is simply the same list with the
#   subdirectory removed

LINKLIBS = $(patsubst $(LIBRARIES_DIR)\\%,%,$(TINYARALIBS))

# Export tool definitions

MKEXPORT = tools\mkexport.bat
MKEXPORT_ARGS = -w$(WINTOOL) -t "$(TOPDIR)"

ifeq ($(CONFIG_BUILD_PROTECTED),y)
MKEXPORT_ARGS = -u
else
ifeq ($(CONFIG_BUILD_KERNEL),y)
MKEXPORT_ARGS = -u
endif
endif

ifeq ($(V),2)
MKEXPORT_ARGS += -d
endif

# This is the name of the final target (relative to the top level directorty)

BIN_EXE = tinyara$(EXEEXT)
BIN = $(OUTBIN_DIR)\$(BIN_EXE)

all: $(BIN)
.PHONY: context clean_context check_context configenv config oldconfig menuconfig export subdir_clean clean subdir_distclean distclean apps_clean apps_distclean

# Target used to copy include\tinyara\math.h.  If CONFIG_ARCH_MATH_H is
# defined, then there is an architecture specific math.h header file
# that will be included indirectly from include\math.h.  But first, we
# have to copy math.h from include\tinyara\. to include\.  Logic within
# include\tinyara\math.h will hand the redirection to the architecture-
# specific math.h header file.
#
# If the CONFIG_LIBM is defined, the Rhombus libm will be built at libc\math.
# Definitions and prototypes for the Rhombus libm are also contained in
# include\tinyara\math.h and so the file must also be copied in that case.
#
# If neither CONFIG_ARCH_MATH_H nor CONFIG_LIBM is defined, then no math.h
# header file will be provided.  You would want that behavior if (1) you
# don't use libm, or (2) you want to use the math.h and libm provided
# within your toolchain.

ifeq ($(CONFIG_ARCH_MATH_H),y)
NEED_MATH_H = y
else
ifeq ($(CONFIG_LIBM),y)
NEED_MATH_H = y
endif
endif

ifeq ($(NEED_MATH_H),y)
include\math.h: include\tinyara\math.h
	$(Q) cp -f include\tinyara\math.h include\math.h
else
include\math.h:
endif

# The float.h header file defines the properties of your floating point
# implementation.  It would always be best to use your toolchain's float.h
# header file but if none is available, a default float.h header file will
# provided if this option is selected.  However there is no assurance that
# the settings in this float.h are actually correct for your platform!

ifeq ($(CONFIG_ARCH_FLOAT_H),y)
include\float.h: include\tinyara\float.h
	$(Q) cp -f include\tinyara\float.h include\float.h
else
include\float.h:
endif

# Target used to copy include\tinyara\stdarg.h.  If CONFIG_ARCH_STDARG_H is
# defined, then there is an architecture specific stdarg.h header file
# that will be included indirectly from include\stdarg.h.  But first, we
# have to copy stdarg.h from include\tinyara\. to include\.

ifeq ($(CONFIG_ARCH_STDARG_H),y)
include\stdarg.h: include\tinyara\stdarg.h
	$(Q) cp -f include\tinyara\stdarg.h include\stdarg.h
else
include\stdarg.h:
endif

# Targets used to build include\tinyara\version.h.  Creation of version.h is
# part of the overall TinyAra configuration sequence. Notice that the
# tools\mkversion tool is built and used to create include\tinyara\version.h

tools\mkversion$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkversion$(HOSTEXEEXT)

$(TOPDIR)\.version:
	$(Q) echo CONFIG_VERSION_STRING="5.0" > .version
	$(Q) echo CONFIG_VERSION_MAJOR=5 >> .version
	$(Q) echo CONFIG_VERSION_MINOR=0 >> .version
	$(Q) echo CONFIG_VERSION_BUILD="0" >> .version

# $(Q) if [ ! -f .version ]; then \
# 	echo "No .version file found, creating one"; \
# 	tools\version.sh -v 5.0 -b 0 .version; \
# 	chmod 755 .version; \
# fi

include\tinyara\version.h: $(TOPDIR)\.version tools\mkversion$(HOSTEXEEXT)
	$(Q) tools\mkversion$(HOSTEXEEXT) $(TOPDIR) > include\tinyara\version.h

# Targets used to build include\tinyara\config.h.  Creation of config.h is
# part of the overall TinyAra configuration sequence. Notice that the
# tools\mkconfig tool is built and used to create include\tinyara\config.h

tools\mkconfig$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkconfig$(HOSTEXEEXT)

include\tinyara\config.h: $(TOPDIR)\.config tools\mkconfig$(HOSTEXEEXT)
	$(Q) tools\mkconfig$(HOSTEXEEXT) $(TOPDIR) > include\tinyara\config.h

# Targets used to create dependencies

tools\mkdeps$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkdeps$(HOSTEXEEXT)

# dirlinks, and helpers
#
# Directories links.  Most of establishing the tinyara configuration involves
# setting up symbolic links with 'generic' directory names to specific,
# configured directories.
#
# Link the apps\include directory to include\apps

include\apps: Make.defs
ifneq ($(APPDIR),)
	@echo LN: include\apps $(APPDIR)\include
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d include\apps $(APPDIR)\include
else
	$(Q) xcopy $(APPDIR)\include include\apps /c /q /s /e /y /i
	$(Q) echo FAKELNK > include\apps\.fakelnk
endif
endif

# Link the arch\<arch-name>\include directory to include\arch

include\arch: Make.defs
	@echo LN: include\arch to $(ARCH_DIR)\include
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d include\arch $(TOPDIR)\$(ARCH_DIR)\include
else
	$(Q) xcopy $(TOPDIR)\$(ARCH_DIR)\include include\arch /c /q /s /e /y /i
	$(Q) echo FAKELNK > include\arch\.fakelnk
endif

# Link the configs\<board-name>\include directory to include\arch\board

include\arch\board: include\arch Make.defs include\arch
	@echo LN: include\arch\board to $(BOARD_DIR)\include
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d include\arch\board $(TOPDIR)\$(BOARD_DIR)\include
else
	$(Q) xcopy $(TOPDIR)\$(BOARD_DIR)\include include\arch\board /c /q /s /e /y /i
	$(Q) echo FAKELNK > include\arch\board\.fakelnk
endif

# Link the configs\<board-name>\src dir to arch\<arch-name>\src\board

$(ARCH_SRC)\board: Make.defs
	@echo LN: $(ARCH_SRC)\board to $(BOARD_DIR)\src
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d $(ARCH_SRC)\board $(TOPDIR)\$(BOARD_DIR)\src
else
	$(Q) xcopy $(TOPDIR)\$(BOARD_DIR)\src $(ARCH_SRC)\board /c /q /s /e /y /i
	$(Q) echo FAKELNK > $(ARCH_SRC)\board\.fakelnk
endif

# Link arch\<arch-name>\include\<chip-name> to arch\<arch-name>\include\chip

$(ARCH_SRC)\chip: Make.defs
ifneq ($(CONFIG_ARCH_CHIP),)
	@echo LN: $(ARCH_SRC)\chip to $(ARCH_SRC)\$(CONFIG_ARCH_CHIP)
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d $(ARCH_SRC)\chip $(TOPDIR)\$(ARCH_SRC)\$(CONFIG_ARCH_CHIP)
else
	$(Q) xcopy $(TOPDIR)\$(ARCH_SRC)\$(CONFIG_ARCH_CHIP) $(ARCH_SRC)\chip /c /q /s /e /y /i
	$(Q) echo FAKELNK > $(ARCH_SRC)\chip\.fakelnk
endif
endif

# Link arch\<arch-name>\src\<chip-name> to arch\<arch-name>\src\chip

include\arch\chip: include\arch Make.defs
ifneq ($(CONFIG_ARCH_CHIP),)
	@echo LN: include\arch\chip to $(ARCH_INC)\$(CONFIG_ARCH_CHIP)
ifeq ($(CONFIG_WINDOWS_MKLINK),y)
	$(Q) /user:administrator mklink /d include\arch\chip $(TOPDIR)\$(ARCH_INC)\$(CONFIG_ARCH_CHIP)
else
	$(Q) xcopy $(TOPDIR)\$(ARCH_INC)\$(CONFIG_ARCH_CHIP) include\arch\chip /c /q /s /e /y /i
	$(Q) echo FAKELNK > include\arch\chip\.fakelnk
endif
endif

dirlinks: include\arch include\arch\board include\arch\chip $(ARCH_SRC)\board $(ARCH_SRC)\chip include\apps

# context
#
# The context target is invoked on each target build to assure that TinyAra is
# properly configured.  The basic configuration steps include creation of the
# the config.h and version.h header files in the include\tinyara directory and
# the establishment of symbolic links to configured directories.

context: check_context include\tinyara\config.h include\tinyara\version.h include\math.h include\float.h include\stdarg.h dirlinks
	$(Q) if exist $(BIN) (
		echo "Previous Build Outputs - $(OUTBIN_DIR) - are deleted"
		$(call DELFILE, $(OUTBIN_DIR)\*.*)
	)
	$(call DELFILE, $(APPDIR)\builtin\registry\*.?dat)
	$(Q) for %%G in ($(CONTEXTDIRS)) do ( $(MAKE) -C %%G TOPDIR="$(TOPDIR)" context )

# clean_context
#
# This is part of the distclean target.  It removes all of the header files
# and symbolic links created by the context target.

clean_context:
	$(call DELFILE, include\tinyara\config.h)
	$(call DELFILE, include\tinyara\version.h)
	$(call DELFILE, include\math.h)
	$(call DELFILE, include\stdarg.h)
	$(call DELDIR, include\arch\board)
	$(call DELDIR, include\arch\chip)
	$(call DELDIR, include\arch)
	$(call DELDIR, $(ARCH_SRC)\board)
	$(call DELDIR, $(ARCH_SRC)\chip)
	$(call DELDIR, include\apps)

# check_context
#
# This target checks if TinyAra has been configured.  TinyAra is configured using
# the script tools\configure.bat.  That script will install certain files in
# the top-level TinyAra build directory.  This target verifies that those
# configuration files have been installed and that TinyAra is ready to be built.

check_context:
	$(Q) if not exist $(TOPDIR)\.config echo "$(TOPDIR)\.config does not exist"
	$(Q) if not exist $(TOPDIR)\Make.defs echo "$(TOPDIR)\Make.defs does not exist"

# Archive targets.  The target build sequence will first create a series of
# libraries, one per configured source file directory.  The final TinyAra
# execution will then be built from those libraries.  The following targets
# build those libraries.

include LibTargets.mk

# pass1 and pass2
#
# If the 2 pass build option is selected, then this pass1 target is
# configured to built before the pass2 target.  This pass1 target may, as an
# example, build an extra link object (CONFIG_PASS1_OBJECT) which may be an
# incremental (relative) link object, but could be a static library (archive);
# some modification to this Makefile would be required if CONFIG_PASS1_OBJECT
# is an archive.  Exactly what is performed during pass1 or what it generates
# is unknown to this makefile unless CONFIG_PASS1_OBJECT is defined.

PASS1_BUILDIR = $(BOARD_DIR)/userspace

pass1deps: pass1dep $(USERLIBS)

pass1: pass1deps
ifeq ($(CONFIG_BUILD_2PASS),y)
# FIXME
# shell scripts (if)?
	$(Q) if [ ! -d "$(PASS1_BUILDIR)" ]; then \
		echo "ERROR: PASS1_BUILDIR does not exist"; \
		exit 1; \
	fi
	$(Q) if [ ! -f "$(PASS1_BUILDIR)\Makefile" ]; then \
		echo "ERROR: No Makefile in PASS1_BUILDIR"; \
		exit 1; \
	fi
	$(Q) $(MAKE) -C $(PASS1_BUILDIR) TOPDIR="$(TOPDIR)" LINKLIBS="$(LINKLIBS)" USERLIBS="$(USERLIBS)" "$(CONFIG_PASS1_TARGET)"
endif

pass2deps: pass2dep $(TINYARALIBS)

pass2: pass2deps
	$(Q) $(MAKE) -C $(ARCH_SRC) TOPDIR="$(TOPDIR)" OUTBIN_DIR="$(OUTBIN_DIR)" LIBRARIES_DIR="$(LIBRARIES_DIR)" EXTRA_OBJS="$(EXTRA_OBJS)" LINKLIBS="$(LINKLIBS)" EXTRADEFINES=$(KDEFINE) $(BIN)
ifeq ($(CONFIG_INTELHEX_BINARY),y)
	@echo "CP: $(BIN_EXE).hex"
	$(Q) $(OBJCOPY) $(OBJCOPYARGS) -O ihex $(BIN) $(BIN).hex
endif
ifeq ($(CONFIG_MOTOROLA_SREC),y)
	@echo "CP: $(BIN_EXE).srec"
	$(Q) $(OBJCOPY) $(OBJCOPYARGS) -O srec $(BIN) $(BIN).srec
endif
ifeq ($(CONFIG_RAW_BINARY),y)
	@echo "CP: $(BIN_EXE).bin"
	$(Q) $(OBJCOPY) $(OBJCOPYARGS) -O binary $(BIN) $(BIN).bin
endif
ifeq ($(CONFIG_SAMSUNG_NS2),y)
	@echo "ATTACHNS2: $(BIN) --> $(BIN)_head.bin"
	$(Q) tools/s5jchksum.py $(BIN).bin $(BIN)_head.bin
endif

# $(BIN)
#
# Create the final TinyAra executable in a two pass build process.  In the
# normal case, all pass1 and pass2 dependencies are created then pass1
# and pass2 targets are built.  However, in some cases, you may need to build
# pass1 dependencies and pass1 first, then build pass2 dependencies and pass2.
# in that case, execute 'make pass1 pass2' from the command line.

$(BIN): pass1deps pass2deps pass1 pass2

# download
#
# This is a helper target that will rebuild TinyAra and download it to the target
# system in one step.  The operation of this target depends completely upon
# implementation of the DOWNLOAD command in the user Make.defs file.  It will
# generate an error an error if the DOWNLOAD command is not defined.

download: $(BIN)
	$(call DOWNLOAD, $<)

# pass1dep: Create pass1 build dependencies
# pass2dep: Create pass2 build dependencies

pass1dep: context tools\mkdeps$(HOSTEXEEXT)
	$(Q) for %%G in ($(USERDEPDIRS)) do ( $(MAKE) -C %%G TOPDIR="$(TOPDIR)" depend )

pass2dep: context tools\mkdeps$(HOSTEXEEXT)
	$(Q) for %%G in ($(KERNDEPDIRS)) do ( $(MAKE) -C %%G TOPDIR="$(TOPDIR)" EXTRADEFINES=$(KDEFINE) depend )

# Configuration targets
#
# These targets depend on the kconfig-frontends packages.  To use these, you
# must first download and install the kconfig-frontends package from this
# location: http://ymorin.is-a-geek.org/projects/kconfig-frontends.  See
# misc\tools\README.txt for additional information.

config:
	$(Q) set APPSDIR=$(patsubst "%",%,${CONFIG_APPS_DIR})& set LIBDIR=${LIB_DIR}& set EXTERNALDIR=${CONFIG_EXTERNAL_DIR}& kconfig-conf Kconfig

oldconfig:
	$(Q) set APPSDIR=$(patsubst "%",%,${CONFIG_APPS_DIR})& set LIBDIR=${LIB_DIR}& set EXTERNALDIR=${CONFIG_EXTERNAL_DIR}& kconfig-conf --oldconfig Kconfig

menuconfig: configenv
	$(Q) set APPSDIR=$(patsubst "%",%,${CONFIG_APPS_DIR})& set LIBDIR=${LIB_DIR}& set EXTERNALDIR=${CONFIG_EXTERNAL_DIR}& kconfig-mconf Kconfig

# export
#
# The export target will package the TinyAra libraries and header files into
# an exportable package.  Caveats: (1) These needs some extension for the KERNEL
# build; it needs to receive USERLIBS and create a libuser.a). (2) The logic
# in tools\mkexport.sh only supports GCC and, for example, explicitly assumes
# that the archiver is 'ar'

export: pass2deps
	$(Q) $(MKEXPORT) $(MKEXPORT_ARGS) -w$(WINTOOL) -t "$(TOPDIR)" -l "$(EXPORTLIBS)"

# General housekeeping targets:  dependencies, cleaning, etc.
#
# depend:    Create both PASS1 and PASS2 dependencies
# clean:     Removes derived object files, archives, executables, and
#            temporary files, but retains the configuration and context
#            files and directories.
# distclean: Does 'clean' then also removes all configuration and context
#            files.  This essentially restores the directory structure
#            to its original, unconfigured stated.

depend: pass1dep pass2dep

subdir_clean:
	$(Q) for %%G in ($(CLEANDIRS)) do ( if exist %%G\Makefile $(MAKE) -C %%G TOPDIR="$(TOPDIR)" clean )
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)" clean
ifeq ($(CONFIG_BUILD_2PASS),y)
	$(Q) $(MAKE) -C $(PASS1_BUILDIR) TOPDIR="$(TOPDIR)" clean
endif

clean: subdir_clean
	$(call DELFILE, $(OUTBIN_DIR)\*)
	$(call DELFILE, _SAVED_APPS_config)
	$(call DELFILE, tinyara-export*)
	$(call DELFILE, tinyara_user*)
	$(call CLEAN)

subdir_distclean:
	$(Q) for %%G in ($(CLEANDIRS)) do ( if exist %%G\Makefile $(MAKE) -C %%G TOPDIR="$(TOPDIR)" distclean )

distclean: clean subdir_distclean clean_context
ifeq ($(CONFIG_BUILD_2PASS),y)
	$(Q) $(MAKE) -C $(PASS1_BUILDIR) TOPDIR="$(TOPDIR)" distclean
endif
	$(call DELFILE, Make.defs)
	$(call DELFILE, setenv.sh)
	$(call DELFILE, setenv.bat)
	$(call DELFILE, .config)
	$(call DELFILE, .config.old)

# Application housekeeping targets.  The APPDIR variable refers to the user
# application directory.  A sample apps\ directory is included with TinyAra,
# however, this is not treated as part of TinyAra and may be replaced with a
# different application directory.  For the most part, the application
# directory is treated like any other build directory in this script.  However,
# as a convenience, the following targets are included to support housekeeping
# functions in the user application directory from the TinyAra build directory.
#
# apps_clean:     Perform the clean operation only in the user application
#                 directory
# apps_distclean: Perform the distclean operation only in the user application
#                 directory.

apps_clean:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(APPDIR)" TOPDIR="$(TOPDIR)" clean
endif

apps_distclean:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(APPDIR)" TOPDIR="$(TOPDIR)" distclean
endif
