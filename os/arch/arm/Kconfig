#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

if ARCH_ARM

choice
	prompt "ARM chip selection"
	default ARCH_CHIP_S5J

config ARCH_CHIP_LM
	bool "TI/Luminary Stellaris"
	select ARCH_HAVE_MPU
	select ARM_HAVE_MPU_UNIFIED
	---help---
		TI/Luminary Stellaris LMS3 and LM4F architectures (ARM Cortex-M3/4)

config ARCH_CHIP_S5J
	bool "Samsung S5J"
	select ARCH_CORTEXR4
	select ARCH_HAVE_MPU
	select ARCH_HAVE_TICKLESS
	select ARM_HAVE_MPU_UNIFIED
	select ARMV7R_MEMINIT
	---help---
		Samsung IoT SoC architectures (ARM Cortex R)

config ARCH_CHIP_BCM4390X
	bool "Cypress BCM4390X"
	select ARCH_CORTEXR4
	select ARCH_HAVE_MPU
	select ARMV7M_MPU
	select ARCH_HAVE_LOWVECTORS
	select ARCH_LOWVECTORS
	select ARM_UNWIND
	---help---
		Cypress BCM4390x SoC architectures (ARM Cortex-R)
config ARCH_CHIP_IMX6
	bool "NXP/Freescale iMX.6"
	select ARCH_CORTEXA9
	select ARM_THUMB
#	select ARMV7A_HAVE_L2CC_PL310
	select ARM_HAVE_NEON
	select ARCH_HAVE_TRUSTZONE
	select ARCH_HAVE_LOWVECTORS
	select ARCH_HAVE_FETCHADD
	select ARCH_HAVE_SDRAM
	select BOOT_RUNFROMSDRAM
	select ARCH_HAVE_ADDRENV
	select ARCH_NEED_ADDRENV_MAPPING
	---help---
		Freescale iMX.6 architectures (Cortex-A9)

config ARCH_CHIP_STM32
	bool "STMicro STM32"
	select ARCH_HAVE_MPU
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_HEAPCHECK if DEBUG
	---help---
		STMicro STM32 architectures (ARM Cortex-M3/4).

config ARCH_CHIP_IMXRT
	bool "NXP/Freescale iMX.RT"
	select ARCH_CORTEXM7
	select ARCH_HAVE_MPU
	select ARCH_HAVE_RAMFUNCS
	select ARCH_HAVE_TICKLESS
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_SPI_CS_CONTROL
	select ARM_HAVE_MPU_UNIFIED
	select ARMV7M_HAVE_STACKCHECK
	---help---
		NXP i.MX RT (ARM Cortex-M7) architectures

config ARCH_CHIP_STM32L4
	bool "STMicro STM32L4"
	select ARCH_HAVE_MPU
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_HEAPCHECK if DEBUG
	---help---
		STMicro STM32 architectures (ARM Cortex-M3/4).

config ARCH_CHIP_AMEBAD
	bool "Realtek AMEBAD"
	select ARCH_HAVE_MPU
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_HEAPCHECK if DEBUG
	---help---
		Realtek AMEBAD architectures (ARM Cortex-M23/33).

config ARCH_CHIP_STM32H745
	bool "STMicro STM32H745"
	select ARCH_HAVE_MPU
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_HEAPCHECK if DEBUG
	select BOARDCTL_BOARD_HEADER
	---help---
		STMicro STM32 architectures (ARM Cortex-M7/M4 Dual core).

config ARCH_CHIP_AMEBALITE
	bool "Realtek AMEBALITE"
	select ARCH_HAVE_MPU
	select ARCH_HAVE_I2CRESET
	select ARCH_HAVE_HEAPCHECK if DEBUG
	---help---
		Realtek AMEBALITE architectures (ARM Cortex-M23/33).

config ARCH_CHIP_AMEBASMART
	bool "Realtek AMEBASMART"
	select ARCH_CORTEXA32
	select ARM_HAVE_NEON
	select ARCH_HAVE_TRUSTZONE
	select ARCH_HAVE_LOWVECTORS
	select ARCH_HAVE_FETCHADD
	select ARCH_HAVE_SDRAM
	select BOOT_RUNFROMSDRAM
	select ARCH_HAVE_ADDRENV
	select ARCH_NEED_ADDRENV_MAPPING
	select ARCH_HAVE_HEAPCHECK if DEBUG
	select ARCH_HAVE_DVFS
	select ARCH_HAVE_TICKSUPPRESS
	select ARM_HAVE_WFE_SEV
	select CPU_GATING if SMP
	select CPU_HOTPLUG if (SMP && PM)
	---help---
		Realtek AMEBASMART architectures (ARM Cortex-A32).

endchoice

config ARCH_CHIP
	string
	default "s5j"		if ARCH_CHIP_S5J
	default "tiva"      if ARCH_CHIP_LM
	default "bcm4390x"	if ARCH_CHIP_BCM4390X
	default "stm32"		if ARCH_CHIP_STM32
	default "imxrt"		if ARCH_CHIP_IMXRT
	default "stm32l4"	if ARCH_CHIP_STM32L4
	default "amebad"	if ARCH_CHIP_AMEBAD
	default "amebalite"	if ARCH_CHIP_AMEBALITE
	default "amebasmart"	if ARCH_CHIP_AMEBASMART
	default "stm32h745"     if ARCH_CHIP_STM32H745
	default "imx6"		if ARCH_CHIP_IMX6

config ARM_THUMB
        bool "Thumb Mode"
        default n

config ARM_HAVE_DPFPU32
        bool
        select ARCH_HAVE_DPFPU
        default n
        ---help---
                FPU implemented in the VFPv[3|4]-D32 format that supports
                32 double-precision floating-point registers.

config ARM_HAVE_WFE_SEV
        bool "Support WFE_SEV"
        default n
        ---help---
                WFE instruction cause the core to enter low power state.
                This reduces the power drawn to static leakage current only.

config ARM_HAVE_NEON
        bool
        default n
        select ARM_HAVE_DPFPU32
        ---help---
                Decide whether to support NEON instruction

config ARM_FPU_ABI_SOFT
        bool "Soft Float ABI"
        default n
        depends on ARCH_HAVE_FPU
        ---help---
                Pass float value via integer register (-mfloat-abi=softfp)

config ARM_DPFPU32
        bool "FPU with 32 double-precision register"
        default y
        depends on ARCH_DPFPU && ARM_HAVE_DPFPU32

config ARM_NEON
        bool "Advanced SIMD (NEON) Extension"
        default y
        depends on ARM_HAVE_NEON && ARM_DPFPU32

config ARM_HAVE_MPCORE
        bool
        default n
        ---help---
                Decide whether support MPCore extension

comment "ARM Options"

config ARCH_CORTEXM3
	bool
	default n
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_RAMVECTORS
	select ARCH_HAVE_HIPRI_INTERRUPT
	select ARCH_ARMV7M_FAMILY

config ARCH_CORTEXM4
	bool
	default n
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_RAMVECTORS
	select ARCH_HAVE_HIPRI_INTERRUPT
	select ARCH_ARMV7M_FAMILY

config ARCH_CORTEXM7
	bool
	default n
	select ARCH_HAVE_FPU
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_IRQTRIGGER
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_RAMVECTORS
	select ARCH_HAVE_LAZYFPU
	select ARCH_HAVE_HIPRI_INTERRUPT
	select ARCH_HAVE_RESET
	select ARCH_HAVE_COHERENT_DCACHE if ELF || MODULE
	select ARCH_HAVE_HARDFAULT_DEBUG
	select ARCH_HAVE_MEMFAULT_DEBUG
	select ARCH_HAVE_NESTED_INTERRUPT
	select ARCH_ARMV7M_FAMILY

config ARCH_CORTEXM33
	bool
	default n
	select ARCH_HAVE_FPU
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_RAMVECTORS
	select ARCH_HAVE_RESET
	select ARCH_HAVE_HIPRI_INTERRUPT
	select ARCH_ARMV8M_FAMILY
	select ARCH_HAVE_NESTED_INTERRUPT
	select ARCH_HAVE_LAZYFPU

config ARCH_CORTEXM55
	bool
	default n
	select ARCH_HAVE_FPU
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_RAMVECTORS
	select ARCH_HAVE_RESET
	select ARCH_HAVE_HIPRI_INTERRUPT
	select ARCH_ARMV8M_FAMILY
	select ARCH_HAVE_NESTED_INTERRUPT
	select ARCH_HAVE_LAZYFPU

config ARCH_CORTEXA9
	bool
	default n
	select ARCH_DCACHE
	select ARCH_ICACHE
	select ARCH_HAVE_MMU
	select ARCH_USE_MMU
	select ARCH_HAVE_TESTSET
	select ARCH_HAVE_THREAD_LOCAL
	select ARM_HAVE_MPCORE
	select ARCH_ARMV7A_FAMILY

config ARCH_CORTEXR4
	bool
	default n
	select ARCH_HAVE_MPU
	select ARCH_HAVE_CMNVECTOR
	select ARCH_HAVE_COHERENT_DCACHE if ELF || MODULE
	select ARCH_HAVE_DABORTSTACK if !ARCH_CHIP_BCM4390X
	select ARCH_ARMV7R_FAMILY

config ARCH_CORTEXA32
	bool
	default n
	select ARCH_DCACHE
	select ARCH_ICACHE
	select ARCH_HAVE_IRQPRIO
	select ARCH_HAVE_RESET
	select ARCH_HAVE_MMU
	select ARCH_USE_MMU
	select ARCH_HAVE_TESTSET
	select ARCH_HAVE_THREAD_LOCAL
	select ARCH_ARMV7A_FAMILY
	select ARCH_HAVE_TESTSET

config ARCH_ARMV7M_FAMILY
	bool
	default n

config ARCH_ARMV8M_FAMILY
	bool
	default n

config ARCH_ARMV7R_FAMILY
	bool
	default n

config ARCH_ARMV7A_FAMILY
	bool
	default n

config ARCH_FAMILY
	string
	default "armv7-a"	if ARCH_ARMV7A_FAMILY
	default "armv7-m"	if ARCH_ARMV7M_FAMILY
	default "armv7-r"	if ARCH_ARMV7R_FAMILY
	default "armv8-m"	if ARCH_ARMV8M_FAMILY

config ARCH_HAVE_CMNVECTOR
	bool

config ARM_CMNVECTOR
	bool "Use common ARM vectors"
	default n
	depends on ARCH_HAVE_CMNVECTOR
	---help---
		Some architectures use their own, built-in vector logic.  Some use only
		the common vector logic.  Some can use either their own built-in vector
		logic or the common vector logic.

config ARCH_HAVE_FPU
	bool
	default n

config ARCH_HAVE_DPFPU
	bool
	default n

config ARCH_HAVE_LAZYFPU
	bool

config ARCH_FPU
	bool "FPU support"
	default n
	depends on ARCH_HAVE_FPU
	---help---
		Build in support for the ARM Cortex-M4 Floating Point Unit (FPU).
		Check your chip specifications first; not all Cortex-M4 chips support the FPU.

config ARCH_DPFPU
	bool "Double precision FPU support"
	default y
	depends on ARCH_FPU && ARCH_HAVE_DPFPU
	---help---
		Enable toolchain support for double precision (64-bit) floating
		point if both the toolchain and the hardware support it.

config ARM_HAVE_MPU_UNIFIED
	bool
	default n
	---help---
		Automatically selected to indicate that the CPU supports a
		unified MPU for both instruction and data addresses.

config ARM_MPU
	bool
	default n
	select ARCH_USE_MPU

config ARMV7M_MPU
	bool "MPU support"
	default n
	depends on ARCH_HAVE_MPU
	depends on ARCH_ARMV7M_FAMILY || ARCH_ARMV7R_FAMILY
	select ARM_MPU
	---help---
		Build in support for the ARM Cortex-M3/4 Memory Protection Unit (MPU).
		Check your chip specifications first; not all Cortex-M3/4 chips support the MPU.

config ARMV7M_MPU_NREGIONS
	int "Number of MPU regions"
	default 16 if ARCH_CORTEXM7
	default 8 if !ARCH_CORTEXM7
	depends on ARMV7M_MPU
	---help---
		This is the number of protection regions supported by the MPU.

config ARMV8M_MPU
	bool "MPU support"
	default n
	depends on ARCH_HAVE_MPU
	depends on ARCH_ARMV8M_FAMILY
	select ARM_MPU
	---help---
		Build in support for the ARM Cortex-M33 Memory Protection Unit (MPU).
		Check your chip specifications first; not all Cortex-M33 chips support the MPU.

config ARMV8M_MPU_NREGIONS
	int "Number of MPU regions"
	default 8
	depends on ARMV8M_MPU
	---help---
		This is the number of protection regions supported by the MPU.

config ARCH_HAVE_LOWVECTORS
	bool

config ARCH_LOWVECTORS
	bool "Vectors in low memory"
	default n
	depends on ARCH_HAVE_LOWVECTORS
	---help---
		Support ARM vectors in low memory.

config ARCH_ROMPGTABLE
	bool "ROM page table"
	default n
	depends on ARCH_USE_MMU
	---help---
		Support a fixed memory mapping use a (read-only) page table in ROM/FLASH.

config ARCH_HAVE_TICKSUPPRESS
	bool
	default n

config DEBUG_HARDFAULT
	bool "Verbose Hard-Fault Debug"
	default n
	depends on DEBUG && (ARCH_ARMV7M_FAMILY || ARCH_ARMV8M_FAMILY)
	---help---
		Enables verbose debug output when a hard fault is occurs.  This verbose
		output is sometimes helpful when debugging difficult hard fault problems,
		but may be more than you typcially want to see.

comment "Exception stack options"

config ARCH_HAVE_DABORTSTACK
	bool
	default n

config ARCH_DABORTSTACK
	int "Dabort Stack Size"
	depends on ARCH_HAVE_DABORTSTACK
	default 0
	---help---
		This architecture supports an data abort stack. If defined, this symbol
		will be the size of the data abort stack in bytes.  If not defined (or
		defined to be zero or less than 512 bytes), the user task stacks
		will be used during data abort handling. Recommended data abort stack
		size is 1K.

choice
	prompt "Stack Protection feature options"
	default SW_STACK_OVERFLOW_DETECTION

config REG_STACK_OVERFLOW_PROTECTION
	bool "REG Stack Overflow Protection"
	depends on ARCH_ARMV8M_FAMILY
	---help---
		Enables stack overflow protection with limit registers.
		It protects each user task's stack overflow outside its max allocated stack memory.

config MPU_STACK_OVERFLOW_PROTECTION
	bool "MPU Stack Overflow Protection"
	depends on BUILD_PROTECTED
	depends on ARM_MPU
	depends on !ARMV8M_MPU
	---help---
		Enables stack overflow protection.
		It protects each task's stack overflow outside its max allocated stack memory.
		This is applicable to user mode tasks created in protected build.

config SW_STACK_OVERFLOW_DETECTION
	bool "Minimal Software based Stack Overflow Detection"
	depends on STACK_COLORATION
	---help---
		If the hardware does not provide means for stack overflow protection, then 
		we can fall back to this option. It checks for stack overflow during each context
		switch and stops execution if any process stack has overflowed.

config STACK_OVERFLOW_PROTECTION_DISABLE
	bool "Stack Overflow Protection Disable"
	---help---
		Disable Stack Overflow Protection.

endchoice

if MPU_STACK_OVERFLOW_PROTECTION

config MPU_STACK_GUARD_SIZE
	int "Stack Guard size configuration range(32-1024)"
	default 32
	range 32 1024
	---help---
		Set size for the stack guard. It must be set with 32 byte aligned values.
		The size can be set in the range of 32 to 1024 bytes.
		Setting large stack guard size will be a wastage of memory.
endif

config SYSTEM_REBOOT_REASON
	bool "Enable System Reboot Reason Interfaces"
	default n
	---help---
		If selected it will allow to use system reboot reason interfaces.
		Supported interfaces are read, write and clear.
		Interfaces can be used through prctl with
		PR_REBOOT_REASON_READ, PR_REBOOT_REASON_WRITE and PR_REBOOT_REASON_CLEAR.

if ARCH_ARMV7A_FAMILY
source "arch/arm/src/armv7-a/Kconfig"
endif
if ARCH_ARMV7M_FAMILY
source arch/arm/src/armv7-m/Kconfig
endif
if ARCH_ARMV8M_FAMILY
source arch/arm/src/armv8-m/Kconfig
endif
if ARCH_ARMV7R_FAMILY
source arch/arm/src/armv7-r/Kconfig
endif
if ARCH_CHIP_IMX6
source "arch/arm/src/imx6/Kconfig"
endif
if ARCH_CHIP_LM
source arch/arm/src/tiva/Kconfig
endif
if ARCH_CHIP_S5J
source arch/arm/src/s5j/Kconfig
endif
if ARCH_CHIP_BCM4390X
source arch/arm/src/bcm4390x/Kconfig
endif
if ARCH_CHIP_STM32
source arch/arm/src/stm32/Kconfig
endif
if ARCH_CHIP_IMXRT
source arch/arm/src/imxrt/Kconfig
endif
if ARCH_CHIP_STM32L4
source arch/arm/src/stm32l4/Kconfig
endif
if ARCH_CHIP_AMEBAD
source arch/arm/src/amebad/Kconfig
endif
if ARCH_CHIP_AMEBALITE
source arch/arm/src/amebalite/Kconfig
endif
if ARCH_CHIP_AMEBASMART
source arch/arm/src/amebasmart/Kconfig
endif
if ARCH_CHIP_STM32H745
source arch/arm/src/stm32h745/Kconfig
endif
endif
