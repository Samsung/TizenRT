###########################################################################
#
# Copyright 2023 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################
############################################################################
#
#   Copyright (C) 2020 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################
HEAD_ASRC  =

# Common ARM files

#include common/Make.defs
CMN_CSRCS += arm_assert.c arm_allocateheap.c arm_blocktask.c
CMN_CSRCS += arm_createstack.c arm_exit.c arm_fullcontextrestore.c
CMN_CSRCS += arm_initialize.c arm_lowputs.c
CMN_CSRCS += arm_modifyreg16.c arm_modifyreg32.c
CMN_CSRCS += arm_modifyreg8.c arm_nputs.c arm_releasepending.c
CMN_CSRCS += arm_releasestack.c arm_reprioritizertr.c arm_saveusercontext.c
CMN_CSRCS += arm_stackframe.c arm_switchcontext.c
CMN_CSRCS += arm_vfork.c arm_unblocktask.c arm_usestack.c

ifneq ($(CONFIG_ALARM_ARCH),y)
  ifneq ($(CONFIG_TIMER_ARCH),y)
    CMN_CSRCS += arm_mdelay.c arm_udelay.c
  endif
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
  CMN_CSRCS += arm_checkstack.c
endif

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
  CMN_CSRCS += arm_idle.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED)$(CONFIG_BUILD_KERNEL),y)
  CMN_CSRCS += arm_task_start.c arm_pthread_start.c
  CMN_CSRCS += arm_signal_dispatch.c
  ifeq ($(CONFIG_BUILD_PROTECTED),y)
    CMN_UASRCS += arm_signal_handler.S
  endif
endif

ifeq ($(CONFIG_ARM_SEMIHOSTING_SYSLOG),y)
  CMN_CSRCS += arm_semi_syslog.c
endif

ifeq ($(CONFIG_ARM_SEMIHOSTING_HOSTFS),y)
  CMN_CSRCS += arm_hostfs.c
endif

ifeq ($(CONFIG_SCHED_THREAD_LOCAL),y)
  CMN_CSRCS += arm_tls.c
endif

ifeq ($(CONFIG_SCHED_BACKTRACE),y)
  ifeq ($(CONFIG_FRAME_POINTER),y)
    ifeq ($(CONFIG_ARM_THUMB),y)
      CMN_CSRCS += arm_backtrace_thumb.c
    else
      CMN_CSRCS += arm_backtrace_fp.c
    endif
  else
    CMN_CSRCS += arm_backtrace_thumb.c
  endif
endif

CMN_ASRCS += vfork.S

ifeq ($(CONFIG_ARCH_HAVE_TESTSET),y)
  ifeq ($(CONFIG_ARCH_ARMV6M),)
    CMN_ASRCS += arm_testset.S
  endif
endif

ifeq ($(CONFIG_ARCH_HAVE_FETCHADD),y)
  CMN_ASRCS += arm_fetchadd.S
endif

# The vector table is the "head" object, i.e., the one that must forced into
# the link in order to draw in all of the other components

HEAD_ASRC += arm_vectortab.S smccc_call.S

ifeq ($(CONFIG_BUILD_KERNEL),y)
crt0$(OBJEXT): crt0.c
	$(CC) $(CFLAGS) -c armv7-a$(DELIM)crt0.c -o crt0$(OBJEXT)

STARTUP_OBJS = crt0$(OBJEXT)
endif

# Common assembly language files

CMN_ASRCS += arm_cpuhead.S arm_vectoraddrexcptn.S
CMN_ASRCS += arm_vectors.S cp15_cache_size.S cp15_clean_dcache_all.S
CMN_ASRCS += cp15_clean_dcache.S cp15_coherent_dcache.S
CMN_ASRCS += cp15_flush_dcache_all.S cp15_flush_dcache.S
CMN_ASRCS += cp15_invalidate_dcache_all.S cp15_invalidate_dcache.S

# Common C source files

CMN_CSRCS += arm_cache.c arm_dataabort.c up_interruptcontext.c
CMN_CSRCS += arm_doirq.c arm_gicv2.c arm_gicv2_dump.c
CMN_CSRCS += arm_initialstate.c arm_mmu.c arm_prefetchabort.c
CMN_CSRCS += arm_schedulesigaction.c arm_sigdeliver.c
CMN_CSRCS += arm_syscall.c arm_tcbinfo.c arm_undefinedinsn.c
CMN_CSRCS += arm_perf.c up_checkspace.c up_restoretask.c

ifeq ($(CONFIG_ARMV7A_L2CC_PL310),y)
  CMN_CSRCS += arm_l2cc_pl310.c
endif

ifeq ($(CONFIG_PAGING),y)
  CMN_CSRCS += arm_allocpage.c arm_checkmapping.c arm_pginitialize.c
  CMN_CSRCS += arm_va2pte.c
  CMN_ASRCS += arm_pghead.S
else
  CMN_ASRCS += arm_head.S
endif

ifeq ($(CONFIG_ARCH_ADDRENV),y)
  CMN_CSRCS += arm_addrenv.c arm_addrenv_utils.c arm_addrenv_perms.c arm_pgalloc.c
  ifeq ($(CONFIG_ARCH_STACK_DYNAMIC),y)
    CMN_CSRCS += arm_addrenv_ustack.c
  endif
  ifeq ($(CONFIG_ARCH_KERNEL_STACK),y)
    CMN_CSRCS += arm_addrenv_kstack.c
  endif
  ifeq ($(CONFIG_MM_SHM),y)
    CMN_CSRCS += arm_addrenv_shm.c
  endif
endif

ifeq ($(CONFIG_MM_PGALLOC),y)
  CMN_CSRCS += arm_physpgaddr.c
  ifeq ($(CONFIG_ARCH_PGPOOL_MAPPING),y)
    CMN_CSRCS += arm_virtpgaddr.c
  endif
endif

ifeq ($(CONFIG_ARCH_FPU),y)
  CMN_CSRCS += arm_fpucmp.c
  CMN_ASRCS += arm_fpuconfig.S
endif

ifeq ($(CONFIG_SMP),y)
  CMN_CSRCS += arm_cpuindex.c arm_cpustart.c arm_cpupause.c arm_cpuidlestack.c
  CMN_CSRCS += arm_scu.c
endif

ARCH_SRCDIR = $(TOPDIR)/arch/$(CONFIG_ARCH)/src/

# Temporary added to fix compile issue
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/file_system/fatfs
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/file_system/fatfs/r0.14b/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/file_system/vfs2.0

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/amebad2/fwlib/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/amebad2/cmsis
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/amebad2/app/monitor/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/amebad2/swlib
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/amebad2/misc

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/driver/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/driver/intf
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/driver/core
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/api
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/wifi_config
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/wifi/wifi_fast_connect

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/mbed/targets/hal/rtl8730e/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/mbed/api/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/mbed/hal/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/mbed/hal_ext/

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/project/realtek_amebaD2_va0_example/inc/inc_ap

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/os_dep
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/os/tizenrt

CHIP_ASRCS  =
CHIP_CSRCS = amebasmart_boot.c
CHIP_CSRCS += amebasmart_idle.c
CHIP_CSRCS += amebasmart_irq.c
CHIP_CSRCS += amebasmart_clockconfig.c
CHIP_CSRCS += amebasmart_cpuboot.c
CHIP_CSRCS += amebasmart_memorymap.c
CHIP_CSRCS += amebasmart_serial.c
CHIP_CSRCS += amebasmart_timerisr.c
CHIP_CSRCS += amebasmart_enet.c
CHIP_CSRCS += amebasmart_flash.c
CHIP_CSRCS += amebasmart_gpio_lowerhalf.c
CHIP_CSRCS += amebasmart_timer_lowerhalf.c
#CHIP_CSRCS += amebasmart_enet.c
#CHIP_CSRCS += amebasmart_rtc_lowerhalf.c
#CHIP_CSRCS += amebasmart_rtc.c
CHIP_CSRCS += amebasmart_watchdog_lowerhalf.c
#CHIP_CSRCS += amebasmart_i2c.c
#CHIP_CSRCS += amebasmart_i2s.c
#CHIP_CSRCS += amebasmart_spi.c

ifeq ($(CONFIG_BOARDCTL_RESET),y)
CHIP_CSRCS += amebasmart_systemreset.c
endif
ifeq ($(CONFIG_SYSTEM_REBOOT_REASON),y)
#CMN_CSRCS += amebasmart_reboot_reason.c #FIXME
endif
ifeq ($(CONFIG_BINARY_SIGNING),y)
#CMN_CSRCS += amebasmart_signature.c
endif

ifeq ($(CONFIG_AMEBASMART_TRUSTZONE),y)
#CHIP_CSRCS += amebasmart_nsc.c

# trustzone library
ifeq ($(CONFIG_ARCH_FPU),y)
#EXTRA_LIBS += ${TOPDIR}/board/
else
#EXTRA_LIBS += ${TOPDIR}/board/
endif
endif

# Wifi
ifeq ($(CONFIG_AMEBASMART_WIFI),y)
ifeq ($(CONFIG_ARCH_FPU),y)
#EXTRA_LIBS += $(TOPDIR)/board/
else
#EXTRA_LIBS += $(TOPDIR)/board/
endif
endif
