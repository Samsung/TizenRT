###########################################################################
#
# Copyright 2019 NXP Semiconductors All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################
############################################################################
# os/arch/arm/src/imxrt/Make.defs
#
#   Copyright (C) 2018-2019 Gregory Nutt. All rights reserved.
#   Authors: Gregory Nutt <gnutt@nuttx.org>
#            David Sidrane <david_s5@nscdg.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

HEAD_ASRC  =

# Common ARM and Cortex-M7 files

CMN_ASRCS  = up_saveusercontext.S up_fullcontextrestore.S up_switchcontext.S
CMN_ASRCS += up_fetchadd.S vfork.S

CMN_CSRCS  = up_assert.c up_blocktask.c up_copyfullstate.c up_coherent_dcache.c
CMN_CSRCS += up_createstack.c up_mdelay.c up_udelay.c up_exit.c
CMN_CSRCS += up_puts.c up_initialize.c up_initialstate.c up_interruptcontext.c
CMN_CSRCS += up_memfault.c up_busfault.c up_usagefault.c up_modifyreg8.c up_modifyreg16.c up_modifyreg32.c
CMN_CSRCS += up_releasepending.c up_releasestack.c up_reprioritizertr.c
CMN_CSRCS += up_schedulesigaction.c up_sigdeliver.c up_stackframe.c
CMN_CSRCS += up_unblocktask.c up_usestack.c up_doirq.c up_hardfault.c
CMN_CSRCS += up_svcall.c up_vfork.c up_trigger_irq.c up_systemreset.c
CMN_CSRCS += up_unblocktask_withoutsavereg.c up_restoretask.c

ifeq ($(CONFIG_STACK_COLORATION),y)
CMN_CSRCS += go_os_start.c
endif

ifeq ($(CONFIG_ARMV7M_STACKCHECK),y)
CMN_CSRCS += up_stackcheck.c
endif

# Configuration-dependent common files

ifeq ($(CONFIG_ARMV7M_LAZYFPU),y)
CMN_ASRCS += up_lazyexception.S
else
CMN_ASRCS += up_exception.S
endif
CMN_CSRCS += up_vectors.c

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
CMN_CSRCS += up_ramvec_initialize.c up_ramvec_attach.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CMN_CSRCS += up_mpu.c up_task_start.c up_pthread_start.c up_checkspace.c
ifneq ($(CONFIG_DISABLE_SIGNALS),y)
CMN_CSRCS += up_signal_dispatch.c
CMN_UASRCS += up_signal_handler.S
endif
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
CMN_CSRCS += up_checkstack.c
endif

ifeq ($(CONFIG_ARMV7M_DCACHE),y)
CMN_CSRCS += arch_enable_dcache.c arch_disable_dcache.c
CMN_CSRCS += arch_invalidate_dcache.c arch_invalidate_dcache_all.c
ifneq ($(CONFIG_ARMV7M_DCACHE_WRITETHROUGH),y)
CMN_CSRCS += arch_clean_dcache.c arch_clean_dcache_all.c
CMN_CSRCS += arch_flush_dcache.c arch_flush_dcache_all.c
endif
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += up_fpu.S
CMN_CSRCS += up_copyarmstate.c
endif

ifeq ($(CONFIG_SCHED_YIELD_OPTIMIZATION),y)
CMN_CSRCS += up_schedyield.c
endif

CMN_CSRCS += up_allocateheap.c

ifeq ($(CONFIG_ARM_MPU),y)
CMN_CSRCS += up_mpuinit.c
endif

# Required i.MX RT files

CHIP_ASRCS  =
CHIP_CSRCS  = imxrt_start.c imxrt_clockconfig.c
CHIP_CSRCS += imxrt_periphclks.c imxrt_irq.c imxrt_clrpend.c imxrt_gpio.c
CHIP_CSRCS += imxrt_daisy.c imxrt_wdog.c imxrt_iomuxc.c imxrt_serial.c imxrt_wdog_lowerhalf.c
CHIP_CSRCS += imxrt_lowputc.c imxrt_flexspi.c imxrt_clock.c imxrt_log.c
CHIP_CSRCS += imxrt_dmamux.c imxrt_flexram.c
CHIP_CSRCS += imxrt_mtd_flash.c imxrt_adc.c

ifeq ($(CONFIG_IMXRT_SEMC),y)
CHIP_CSRCS += imxrt_semc.c
ifeq ($(CONFIG_IMXRT_SEMC_SDRAM),y)
CHIP_CSRCS += imxrt_semc_sdram.c
endif # IMXRT_SEMC_SDRAM
endif # IMXRT_SEMC

# Configuration-dependent i.MX RT files

ifneq ($(CONFIG_ARCH_IDLE_CUSTOM),y)
CHIP_CSRCS += imxrt_idle.c
endif

ifneq ($(CONFIG_SCHED_TICKLESS),y)
CHIP_CSRCS += imxrt_timerisr.c
endif

ifeq ($(CONFIG_GPIO),y)
CHIP_CSRCS += imxrt_gpio_lowerhalf.c
endif

ifeq ($(CONFIG_PWM),y)
CHIP_CSRCS += imxrt_pwm.c
endif
ifeq ($(CONFIG_IMXRT_GPIO_IRQ),y)
CHIP_CSRCS += imxrt_gpioirq.c
endif

ifeq ($(CONFIG_IMXRT_TIMER),y)
ifeq ($(CONFIG_IMXRT_GPT),y)
CHIP_CSRCS += imxrt_gpt.c
endif
ifeq ($(CONFIG_IMXRT_PIT),y)
CHIP_CSRCS += imxrt_pit.c
endif
ifeq ($(CONFIG_IMXRT_QTMR),y)
CHIP_CSRCS += imxrt_qtmr.c
endif
ifeq ($(CONFIG_IMXRT_TIMER_INTERFACE),y)
CHIP_CSRCS += imxrt_timer_lowerhalf.c
endif
endif # CONFIG_IMXRT_TIMER

ifeq ($(CONFIG_IMXRT_EDMA),y)
CHIP_CSRCS += imxrt_edma.c
endif

ifdef CONFIG_IMXRT_USDHC
CHIP_CSRCS += imxrt_usdhc.c
endif

ifeq ($(CONFIG_IMXRT_SNVS_LPSRTC),y)
CHIP_CSRCS += imxrt_lpsrtc.c
endif
ifeq ($(CONFIG_IMXRT_SNVS_HPRTC),y)
CHIP_CSRCS += imxrt_hprtc.c
endif

ifeq ($(CONFIG_RTC_DRIVER),y)
CHIP_CSRCS += imxrt_rtc_lowerhalf.c
endif

ifeq ($(CONFIG_IMXRT_ENET),y)
CHIP_CSRCS += imxrt_enet.c
else
CHIP_CSRCS += imxrt_net.c
endif

ifeq ($(CONFIG_IMXRT_LPI2C),y)
CHIP_CSRCS += imxrt_lpi2c.c
CHIP_CSRCS += imxrt_i2c.c
endif

ifeq ($(CONFIG_IMXRT_LPSPI),y)
CHIP_CSRCS += imxrt_lpspi.c
endif

ifeq ($(CONFIG_IMXRT_I2S),y)
ifeq ($(CONFIG_IMXRT_EDMA),y)
CHIP_CSRCS += imxrt_i2s_edma.c
else
CHIP_CSRCS += imxrt_i2s.c
endif
endif

ifeq ($(CONFIG_IMXRT_HYPERFLASH),y)
CHIP_CSRCS += imxrt_hyperflash.c
else
CHIP_CSRCS += imxrt_norflash.c
endif

ifeq ($(CONFIG_USBHOST),y)
ifeq ($(CONFIG_IMXRT_USB),y)
VPATH += chip/usb/host
VPATH += chip/usb/phy
CFLAGS += -DUSB_TIZEN_RT
CFLAGS += -Ichip/usb/include
CFLAGS += -Ichip/usb/phy
CFLAGS += -Ichip/usb/host
CHIP_CSRCS += usb_porting.c
CHIP_CSRCS += usb_host_ehci.c
CHIP_CSRCS += usb_host_hci.c
CHIP_CSRCS += usb_host_devices.c
#phy directory
CHIP_CSRCS += usb_phy.c
else
CHIP_CSRCS += imxrt_usbhost.c imxrt_ehci.c
endif
endif
