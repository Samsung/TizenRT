###########################################################################
#
# Copyright 2016-2017 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################
############################################################################
# Makefile.unix
#
#   Copyright (C) 2007-2012, 2014-2015 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

TOPDIR := ${shell pwd | sed -e 's/ /\\ /g'}
MEMSTATS =
-include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk
-include $(TOPDIR)/Make.defs

# Control build verbosity
#
#  V=1,2: Enable echo of commands
#  V=2:   Enable bug/verbose options in tools and scripts

ifeq ($(V),1)
export Q :=
else
ifeq ($(V),2)
export Q :=
else
export Q := @
endif
endif

# Default tools

ifeq ($(DIRLINK),)
DIRLINK = $(TOPDIR)/tools/link.sh
DIRUNLINK = $(TOPDIR)/tools/unlink.sh
endif

# This define is passed as EXTRADEFINES for kernel-mode builds.  It is also passed
# during PASS1 (but not PASS2) context and depend targets.

KDEFINE = ${shell $(TOPDIR)/tools/define.sh "$(CC)" __KERNEL__}

# Process architecture and board-specific directories

ARCH_DIR = arch/$(CONFIG_ARCH)
ARCH_SRC = $(ARCH_DIR)/src
ARCH_INC = $(ARCH_DIR)/include

ifeq ($(CONFIG_ARCH_BOARD_CUSTOM),y)
BOARD_DIR = $(CONFIG_ARCH_BOARD_CUSTOM_DIR)
else
BOARD_DIR = board/$(CONFIG_ARCH_BOARD)
endif

# CONFIG_APPS_DIR can be over-ridden from the command line or in the .config file.
# The default value of CONFIG_APPS_DIR is ../apps.  Ultimately, the application
# will be built if APPDIR is defined.  APPDIR will be defined if a directory containing
# a Makefile is found at the path provided by CONFIG_APPS_DIR

ifeq ($(CONFIG_APPS_DIR),)
CONFIG_APPS_DIR = ../apps
endif
APPDIR := ${shell if [ -r $(CONFIG_APPS_DIR)/Makefile ]; then echo "$(CONFIG_APPS_DIR)"; fi}

LOADABLE_APPDIR := ${shell if [ -r ../loadable_apps/Makefile ]; then echo "../loadable_apps"; fi}

#ifeq ($(CONFIG_FRAMEWORK_DIR),)
CONFIG_FRAMEWORK_DIR = ../framework
#endif
FRAMEWORK_LIB_DIR := ${shell if [ -r $(CONFIG_FRAMEWORK_DIR)/Makefile ]; then echo "$(CONFIG_FRAMEWORK_DIR)"; fi}

ifeq ($(CONFIG_EXTERNAL_DIR),)
CONFIG_EXTERNAL_DIR = ../external
endif
EXTDIR := ${shell if [ -r $(CONFIG_EXTERNAL_DIR)/Makefile ]; then echo "$(CONFIG_EXTERNAL_DIR)"; fi}

ifeq ($(CONFIG_TOOLS_DIR),)
CONFIG_TOOLS_DIR = ../tools
endif
TOOLSDIR := ${shell if [ -r $(CONFIG_TOOLS_DIR)/Makefile ]; then echo "$(CONFIG_TOOLS_DIR)"; fi}

BUILD_DIR = ../build
OUTPUT_DIR = $(BUILD_DIR)/output
LIBRARIES_DIR = $(OUTPUT_DIR)/libraries
OUTBIN_DIR = $(OUTPUT_DIR)/bin
LIB_DIR = ../lib

# Add-on directories.  These may or may not be in place in the
# TinyAra source tree (they must be specifically installed)
#
# TINYARA_ADDONS is the list of directories built into the TinyAra kernel.
# USER_ADDONS is the list of directories that will be built into the user
#   application
#
# FSDIRS depend on file descriptor support; NONFSDIRS do not (except for parts
#   of FSDIRS).  We will exclude FSDIRS from the build if file descriptor
#   support is disabled
# CONTEXTDIRS include directories that have special, one-time pre-build
#   requirements.  Normally this includes things like auto-generation of
#   configuration specific files or creation of configurable symbolic links
# USERDIRS - When TinyAra is build is a monolithic kernel, this provides the
#   list of directories that must be built
# OTHERDIRS - These are directories that are not built but probably should
#   be cleaned to prevent garbage from collecting in them when changing
#   configurations.
#
# CLEANDIRS are the directories that will clean in.  These are
#   all directories that we know about.
# KERNDEPDIRS are the directories in which we will build target dependencies.
#   If TinyAra and applications are built separately (CONFIG_BUILD_PROTECTED or
#   CONFIG_BUILD_KERNEL), then this holds only the directories containing
#   kernel files.
# USERDEPDIRS. If TinyAra and applications are built separately (CONFIG_BUILD_PROTECTED),
#   then this holds only the directories containing user files. If
#   CONFIG_BUILD_KERNEL is selected, then applications are not build at all.

include Directories.mk

#
# Extra objects used in the final link.
#
# Pass 1 1ncremental (relative) link objects should be put into the
# processor-specific source directory (where other link objects will
# be created).  If the pass1 object is an archive, it could go anywhere.

ifeq ($(CONFIG_BUILD_2PASS),y)
EXTRA_OBJS += $(CONFIG_PASS1_OBJECT)
endif

# Library build selections
#
# TINYARALIBS is the list of TinyAra libraries that is passed to the
#   processor-specific Makefile to build the final TinyAra target.
#   Libraries in FSDIRS are excluded if file descriptor support
#   is disabled.
# USERLIBS is the list of libraries used to build the final user-space
#   application
# EXPORTLIBS is the list of libraries that should be exported by
#   'make export' is

ifeq ($(CONFIG_BUILD_PROTECTED),y)
include ProtectedLibs.mk
else
ifeq ($(CONFIG_BUILD_KERNEL),y)
include KernelLibs.mk
else
include FlatLibs.mk
endif
endif

# LINKLIBS derives from TINYARALIBS and is simply the same list with the
#   subdirectory removed

LINKLIBS = $(patsubst $(LIBRARIES_DIR)/%,%,$(TINYARALIBS))

# Export tool definitions

MKEXPORT = tools/mkexport.sh
MKEXPORT_ARGS = -w$(WINTOOL) -t "$(TOPDIR)"

ifeq ($(CONFIG_BUILD_PROTECTED),y)
MKEXPORT_ARGS += -u
else
ifeq ($(CONFIG_BUILD_KERNEL),y)
MKEXPORT_ARGS += -u
endif
endif

ifeq ($(V),2)
MKEXPORT_ARGS += -d
endif

ifeq ($(CONFIG_INTELHEX_BINARY),y)
BIN_EXT = hex
endif
ifeq ($(CONFIG_MOTOROLA_SREC),y)
BIN_EXT = srec
endif
ifeq ($(CONFIG_RAW_BINARY),y)
BIN_EXT = bin
endif
KERNEL_START=$(CONFIG_FLASH_START_ADDR)

# This is the name of the final target (relative to the top level directorty)
BIN_EXE = tinyara$(EXEEXT)
BIN = $(OUTBIN_DIR)/$(BIN_EXE)

memstat: $(BIN) romfs

all: memstat
.PHONY: context clean_context check_context config oldconfig menuconfig nconfig qconfig gconfig export subdir_clean clean subdir_distclean distclean apps_clean apps_distclean force_build applist appupdate smartfs

# Target used to copy include/tinyara/math.h.  If CONFIG_ARCH_MATH_H is
# defined, then there is an architecture specific math.h header file
# that will be included indirectly from include/math.h.  But first, we
# have to copy math.h from include/tinyara/. to include/.  Logic within
# include/tinyara/math.h will hand the redirection to the architecture-
# specific math.h header file.
#
# If the CONFIG_LIBM is defined, the Rhombus libm will be built at libc/math.
# Definitions and prototypes for the Rhombus libm are also contained in
# include/tinyara/math.h and so the file must also be copied in that case.
#
# If neither CONFIG_ARCH_MATH_H nor CONFIG_LIBM is defined, then no math.h
# header file will be provided.  You would want that behavior if (1) you
# don't use libm, or (2) you want to use the math.h and libm provided
# within your toolchain.

ifeq ($(CONFIG_ARCH_MATH_H),y)
NEED_MATH_H = y
else
ifeq ($(CONFIG_LIBM),y)
NEED_MATH_H = y
endif
endif

ifeq ($(NEED_MATH_H),y)
include/math.h: include/tinyara/math.h
	$(Q) cp -f include/tinyara/math.h include/math.h
else
include/math.h:
endif

# The float.h header file defines the properties of your floating point
# implementation.  It would always be best to use your toolchain's float.h
# header file but if none is available, a default float.h header file will
# provided if this option is selected.  However there is no assurance that
# the settings in this float.h are actually correct for your platform!

ifeq ($(CONFIG_ARCH_FLOAT_H),y)
include/float.h: include/tinyara/float.h
	$(Q) cp -f include/tinyara/float.h include/float.h
else
include/float.h:
endif

# Target used to copy include/tinyara/stdarg.h.  If CONFIG_ARCH_STDARG_H is
# defined, then there is an architecture specific stdarg.h header file
# that will be included indirectly from include/stdarg.h.  But first, we
# have to copy stdarg.h from include/tinyara/. to include/.

ifeq ($(CONFIG_ARCH_STDARG_H),y)
include/stdarg.h: include/tinyara/stdarg.h
	$(Q) cp -f include/tinyara/stdarg.h include/stdarg.h
else
include/stdarg.h:
endif

# Targets used to build include/tinyara/version.h.  Creation of version.h is
# part of the overall TinyAra configuration sequence. Notice that the
# tools/mkversion tool is built and used to create include/tinyara/version.h

force_build:

tools/mkversion$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkversion$(HOSTEXEEXT)

$(TOPDIR)/.version: force_build
	echo "create .version file"; \
	tools/version.sh -v 3.1 .version; \
	chmod 755 .version

include/tinyara/version.h: $(TOPDIR)/.version tools/mkversion$(HOSTEXEEXT)
	$(Q) tools/mkversion $(TOPDIR) > include/tinyara/version.h

# Targets used to build include/tinyara/config.h.  Creation of config.h is
# part of the overall TinyAra configuration sequence. Notice that the
# tools/mkconfig tool is built and used to create include/tinyara/config.h

tools/mkconfig$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkconfig$(HOSTEXEEXT)

include/tinyara/config.h: $(TOPDIR)/.config tools/mkconfig$(HOSTEXEEXT)
	$(Q) tools/mkconfig $(TOPDIR) > include/tinyara/config.h

# Targets used to create dependencies

tools/mkdeps$(HOSTEXEEXT):
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)"  mkdeps$(HOSTEXEEXT)

# dirlinks, and helpers
#
# Directories links.  Most of establishing the TinyAra configuration involves
# setting up symbolic links with 'generic' directory names to specific,
# configured directories.
#
# Link the apps/include directory to include/apps

include/apps: Make.defs
ifneq ($(APPDIR),)
	@echo "LN: include/apps to $(APPDIR)/include"
	$(Q) if [ -d $(TOPDIR)/$(APPDIR)/include ]; then \
		$(DIRLINK) $(TOPDIR)/$(APPDIR)/include include/apps; \
	fi
endif

# Link the arch/<arch-name>/include directory to include/arch

include/arch: Make.defs
	@echo "LN: include/arch to $(ARCH_DIR)/include"
	$(Q) $(DIRLINK) $(TOPDIR)/$(ARCH_DIR)/include include/arch

# Link the configs/<board-name>/include directory to include/arch/board

include/arch/board: include/arch Make.defs 
	@echo "LN: include/arch/board to $(BOARD_DIR)/include"
	$(Q) $(DIRLINK) $(TOPDIR)/$(BOARD_DIR)/include include/arch/board

# Link the configs/<board-name>/src dir to arch/<arch-name>/src/board

$(ARCH_SRC)/board: Make.defs
	@echo "LN: $(ARCH_SRC)/board to $(BOARD_DIR)/src"
	$(Q) $(DIRLINK) $(TOPDIR)/$(BOARD_DIR)/src $(ARCH_SRC)/board

# Link arch/<arch-name>/include/<chip-name> to arch/<arch-name>/include/chip

$(ARCH_SRC)/chip: Make.defs
ifneq ($(CONFIG_ARCH_CHIP),)
	@echo "LN: $(ARCH_SRC)/chip to $(ARCH_SRC)/$(CONFIG_ARCH_CHIP)"
	$(Q) $(DIRLINK) $(TOPDIR)/$(ARCH_SRC)/$(CONFIG_ARCH_CHIP) $(ARCH_SRC)/chip
endif

# Link arch/<arch-name>/src/<chip-name> to arch/<arch-name>/src/chip

include/arch/chip: include/arch Make.defs
ifneq ($(CONFIG_ARCH_CHIP),)
	@echo "LN: include/arch/chip to $(ARCH_INC)/$(CONFIG_ARCH_CHIP)"
	$(Q) $(DIRLINK) $(TOPDIR)/$(ARCH_INC)/$(CONFIG_ARCH_CHIP) include/arch/chip
endif

dirlinks: include/arch include/arch/board include/arch/chip $(ARCH_SRC)/board $(ARCH_SRC)/chip include/apps

# context
#
# The context target is invoked on each target build to assure that TinyAra is
# properly configured.  The basic configuration steps include creation of the
# the config.h and version.h header files in the include/tinyara directory and
# the establishment of symbolic links to configured directories.

context: check_context include/tinyara/config.h include/tinyara/version.h include/math.h include/float.h include/stdarg.h dirlinks
	$(Q)if [ -e ${BIN} ]; then \
		echo "Previous Build Outputs - $(OUTBIN_DIR) - are deleted"; \
		rm -rf ${OUTBIN_DIR}/*; \
	fi
	$(call DELFILE, $(APPDIR)/builtin/registry/*.?dat)
	$(Q) for dir in $(CONTEXTDIRS) ; do \
		$(MAKE) -C $$dir TOPDIR="$(TOPDIR)" EXTDIR="$(EXTDIR)" context; \
	done

# clean_context
#
# This is part of the distclean target.  It removes all of the header files
# and symbolic links created by the context target.

clean_context:
	$(call DELFILE, include/tinyara/config.h)
	$(call DELFILE, include/tinyara/version.h)
	$(call DELFILE, include/math.h)
	$(call DELFILE, include/stdarg.h)
	$(Q) $(DIRUNLINK) include/arch/board
	$(Q) $(DIRUNLINK) include/arch/chip
	$(Q) $(DIRUNLINK) include/arch
	$(Q) $(DIRUNLINK) $(ARCH_SRC)/board
	$(Q) $(DIRUNLINK) $(ARCH_SRC)/chip
	$(Q) $(DIRUNLINK) include/apps

# check_context
#
# This target checks if TinyAra has been configured.  TinyAra is configured using
# the script tools/configure.sh.  That script will install certain files in
# the top-level TinyAra build directory.  This target verifies that those
# configuration files have been installed and that TinyAra is ready to be built.

check_context:
	$(Q) if [ ! -e ${TOPDIR}/.config -o ! -e ${TOPDIR}/Make.defs ]; then \
		echo "" ; \
		echo "TizenRT has not been configured:" ; \
		echo "  tools/configure.sh <target>" ; \
		echo "" ; \
		exit 1 ; \
	fi

# Archive targets.  The target build sequence will first create a series of
# libraries, one per configured source file directory.  The final TinyAra
# execution will then be built from those libraries.  The following targets
# build those libraries.

include LibTargets.mk

# pass1 and pass2
#
# If the 2 pass build option is selected, then this pass1 target is
# configured to built before the pass2 target.  This pass1 target may, as an
# example, build an extra link object (CONFIG_PASS1_OBJECT) which may be an
# incremental (relative) link object, but could be a static library (archive);
# some modification to this Makefile would be required if CONFIG_PASS1_OBJECT
# is an archive.  Exactly what is performed during pass1 or what it generates
# is unknown to this makefile unless CONFIG_PASS1_OBJECT is defined.

ifeq ($(CONFIG_SUPPORT_COMMON_BINARY),y)
LIBGCC = "${shell "$(CC)" $(ARCHCPUFLAGS) -print-libgcc-file-name}"
endif

pass1deps: pass1dep $(USERLIBS)

pass1: pass1deps
ifeq ($(CONFIG_BUILD_2PASS),y)
	$(Q) $(MAKE) -C $(LOADABLE_APPDIR) TOPDIR="$(TOPDIR)" LOADABLEDIR="${LOADABLE_APPDIR}" LIBRARIES_DIR="$(LIBRARIES_DIR)" USERLIBS="$(USERLIBS)" all KERNEL=n
ifeq ($(CONFIG_SUPPORT_COMMON_BINARY),y)
	$(Q) $(LD) -r -o $(OUTBIN_DIR)/$(CONFIG_COMMON_BINARY_NAME) -T $(TOPDIR)/userspace/userspace_apps.ld -L $(LIBRARIES_DIR) --start-group $(USERLIBS) $(LIBGCC) $(LIBSUPXX) --end-group $$(cat $(OUTBIN_DIR)/lib_symbols.txt)
endif
endif

pass2deps: pass2dep $(TINYARALIBS)

pass2: pass2deps
	$(Q) $(MAKE) -C $(ARCH_SRC) TOPDIR="$(TOPDIR)" OUTBIN_DIR="$(OUTBIN_DIR)" LIBRARIES_DIR="$(LIBRARIES_DIR)" EXTRA_OBJS="$(EXTRA_OBJS)" LINKLIBS="$(LINKLIBS)" EXTRADEFINES=$(KDEFINE) $(BIN)
	$(Q) if [ -w /tftpboot ] ; then \
		cp -f $(BIN) /tftpboot/$(BIN_EXE).${CONFIG_ARCH}; \
	fi

ifeq ($(CONFIG_RAW_BINARY),y)
	$(Q) echo "CP: $(BIN_EXE).bin"
	$(Q) $(OBJCOPY) $(OBJCOPYARGS) -O binary $(BIN) $(BIN).bin
endif

# Verify app binary to make sure there are no undefined symbols
define VERIFY_APP
	$(Q) echo "Verify $(OUTBIN_DIR)/$1"
	$(Q) if [ "`nm -u $(OUTBIN_DIR)/$1 | wc -l`" != "0" ]; then \
		echo "Undefined Symbols in $(OUTBIN_DIR)/$1"; \
		nm -u -l $(OUTBIN_DIR)/$1; \
		rm $(OUTBIN_DIR)/$1; \
		exit 1; \
	fi
endef

# Strip debug symbols from binary if CONFIG_ELF_EXCLUDE_SYMBOLS is enabled
ifeq ($(CONFIG_ELF_EXCLUDE_SYMBOLS),y)
define STRIP_DBG
	$(Q) $(OBJCOPY) --remove-section .comment $(OUTBIN_DIR)/$1
	$(Q) $(STRIP) -g $(OUTBIN_DIR)/$1 -o $(OUTBIN_DIR)/$1
endef
endif

# Perform binary compression if it is enabled
ifeq ($(CONFIG_COMPRESSED_BINARY),y)
define COMPRESS_BIN
	$(Q) cp $(OUTBIN_DIR)/$1 $(OUTBIN_DIR)/$1.uncomp
	$(Q) tools/compression/mkcompressimg $(CONFIG_COMPRESSION_BLOCK_SIZE) $(CONFIG_COMPRESSION_TYPE) $(OUTBIN_DIR)/$1 $(OUTBIN_DIR)/$1.comp
	$(Q) mv $(OUTBIN_DIR)/$1.comp $(OUTBIN_DIR)/$1
endef
endif

# Prepare the app binary according to TizenRT requirement
# Strip debug symbols, Compress and add binary header
define PREPARE_APP
	$(Q) echo "Preparing final $(OUTBIN_DIR)/$1 binary"
	$(Q) cp $(OUTBIN_DIR)/$1 $(OUTBIN_DIR)/$1_dbg
	$(Q) $(call STRIP_DBG,$1)
	$(Q) $(call COMPRESS_BIN,$1)
	$(Q) $(TOPDIR)/tools/mkbinheader.py $(OUTBIN_DIR)/$1 $2 $3 $1 $4 $5 $6 $7 $8
	$(Q) $(TOPDIR)/tools/mkchecksum.py $(OUTBIN_DIR)/$1
	$(Q) cp $(OUTBIN_DIR)/$1 $(OUTBIN_DIR)/user
endef

post:
ifeq ($(CONFIG_APP_BINARY_SEPARATION),y)
	$(Q) mkdir -p $(OUTBIN_DIR)/user
ifneq ($(CONFIG_SUPPORT_COMMON_BINARY),y)
ifeq ($(CONFIG_APP1_INFO),y)
	$(Q) $(call VERIFY_APP,$(CONFIG_APP1_BIN_NAME)) #When common binary is used, undefined symbols of app
endif
ifeq ($(CONFIG_APP2_INFO),y)
	$(Q) $(call VERIFY_APP,$(CONFIG_APP2_BIN_NAME)) #will be defined in common binary. So dont perform "verify" for apps
endif
endif 
ifeq ($(CONFIG_APP1_INFO),y)
	$(Q) $(call PREPARE_APP,$(CONFIG_APP1_BIN_NAME),"user",$(CONFIG_APP1_BIN_TYPE),$(CONFIG_APP1_BIN_VER),$(CONFIG_APP1_BIN_DYN_RAMSIZE),$(CONFIG_APP1_MAIN_STACKSIZE),$(CONFIG_APP1_MAIN_PRIORITY),$(CONFIG_APP1_BIN_LOADING_PRIORITY))
endif
ifeq ($(CONFIG_APP2_INFO),y)
	$(Q) $(call PREPARE_APP,$(CONFIG_APP2_BIN_NAME),"user",$(CONFIG_APP2_BIN_TYPE),$(CONFIG_APP2_BIN_VER),$(CONFIG_APP2_BIN_DYN_RAMSIZE),$(CONFIG_APP2_MAIN_STACKSIZE),$(CONFIG_APP2_MAIN_PRIORITY),$(CONFIG_APP2_BIN_LOADING_PRIORITY))
endif
ifeq ($(CONFIG_SUPPORT_COMMON_BINARY),y)
	$(Q) $(call VERIFY_APP,$(CONFIG_COMMON_BINARY_NAME))
	$(Q) $(call PREPARE_APP,$(CONFIG_COMMON_BINARY_NAME),"common",$(CONFIG_COMMON_BINARY_VERSION))
endif
ifeq ($(CONFIG_BINARY_SIGNING),y)
	$(Q) $(call MAKE_USER_SIGNING)
endif
endif
	$(Q) echo "Start the Board Specific Work for Binary"
	$(Q) $(call MAKE_BOARD_SPECIFIC_BIN, $(BIN_EXE), $(BIN_EXT))
	$(Q) $(call MAKE_SAMSUNG_HEADER, $(BIN_EXT))

	$(Q) python ./tools/set_bininfo.py
	$(Q) python ./tools/convert_binary.py "$(BIN_EXT)" "$(OBJCOPY)" "$(OBJCOPYARGS)" "$(KERNEL_START)"

ifeq ($(CONFIG_USE_BP),y)
	$(Q) $(call MAKE_BOOTPARAM)
endif

ifeq ($(CONFIG_FLASH_PARTITION),y)
	$(Q) python ./tools/validate_output.py
endif

ifeq ($(CONFIG_GENERATE_FS_IMAGE),y)
ifneq ($(findstring "smartfs",$(CONFIG_FLASH_PART_TYPE)), "smartfs")
	$(Q) if [ ! -d "$(TOPDIR)/../tools/fs/contents-smartfs" ]; then \
		mkdir -p "$(TOPDIR)/../tools/fs/contents-smartfs"; \
		mkdir -p "$(TOPDIR)/../tools/fs/contents-smartfs/$(CONFIG_ARCH_BOARD)"; \
		mkdir -p "$(TOPDIR)/../tools/fs/contents-smartfs/$(CONFIG_ARCH_BOARD)/base-files"; \
	fi; \
	$(MAKE) smartfs
endif
endif

ifeq ($(CONFIG_UBOOT_UIMAGE),y)
	@echo "MKIMAGE: uImage"
	$(Q) mkimage -A arm -O linux -C none -T kernel -a $(CONFIG_UIMAGE_LOAD_ADDRESS) \
		-e $(CONFIG_UIMAGE_ENTRY_POINT) -n $(BIN) -d $(BIN).bin uImage
	$(Q) if [ -w /tftpboot ] ; then \
		cp -f uImage /tftpboot/uImage; \
	fi
endif
ifeq ($(CONFIG_DEBUG_DISPLAY_SYMBOL),y)
	cp ${OUTBIN_DIR}/System.map ${TOOLSDIR}/fs/contents-romfs/System.map
else
	$(call DELFILE, ${TOOLSDIR}/fs/contents-romfs/System.map)
endif

# $(BIN)
#
# Create the final TinyAra executable in a two pass build process.  In the
# normal case, all pass1 and pass2 dependencies are created then pass1
# and pass2 targets are built.  However, in some cases, you may need to build
# pass1 dependencies and pass1 first, then build pass2 dependencies and pass2.
# in that case, execute 'make pass1 pass2' from the command line.

$(BIN): pass1deps pass2deps pass1 pass2 post

# download
#
# This is a helper target that will rebuild TinyAra and download it to the target
# system in one step.  The operation of this target depends completely upon
# implementation of the DOWNLOAD command in the user Make.defs file.  It will
# generate an error an error if the DOWNLOAD command is not defined.

# Collect arguments for DOWNLOAD.
# All the arguments for DOWNLOAD are expected to be implemented in user/board
# Make.defs file.
#
# example : 	make download ALL
# 		make download [ALL | BOOTLOADER | RESOURCE | KERNEL | APP]

ifeq (download,$(firstword $(MAKECMDGOALS)))
  # use the rest as arguments for "download"
  DOWNLOAD_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # Turn DOWNLOAD_ARGS into do-nothing targets
  $(eval $(DOWNLOAD_ARGS):;@:)
endif

download:
	$(Q) if [ -z ${port} ]; then \
		$(call DOWNLOAD, $(DOWNLOAD_ARGS)) ; \
	else \
		$(call DOWNLOAD, port ${port} $(DOWNLOAD_ARGS)) ; \
	fi

ota_img:
	$(Q) $(call OTA_IMG)

# pass1dep: Create pass1 build dependencies
# pass2dep: Create pass2 build dependencies

pass1dep: context tools/mkdeps$(HOSTEXEEXT) tools/compression/mkcompresstool.sh
	$(Q) for dir in $(USERDEPDIRS) ; do \
		$(MAKE) -C $$dir TOPDIR="$(TOPDIR)" EXTDIR="$(EXTDIR)" depend ; \
	done

pass2dep: context tools/mkdeps$(HOSTEXEEXT)
	$(Q) for dir in $(KERNDEPDIRS) ; do \
		$(MAKE) -C $$dir TOPDIR="$(TOPDIR)" EXTDIR="$(EXTDIR)" EXTRADEFINES=$(KDEFINE) depend; \
	done

# Configuration targets
#
# These targets depend on the kconfig-frontends packages.  To use these, you
# must first download and install the kconfig-frontends package from this
# location: http://ymorin.is-a-geek.org/projects/kconfig-frontends.

config: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-conf Kconfig

oldconfig: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-conf --oldconfig Kconfig

menuconfig: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-mconf Kconfig

do_nconfig: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-nconf Kconfig

nconfig: do_nconfig clean_context

qconfig: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-qconf Kconfig

gconfig: apps_preconfig
	$(Q) APPSDIR=${CONFIG_APPS_DIR} EXTERNALDIR=${CONFIG_EXTERNAL_DIR} LIBDIR=${LIB_DIR} LOADABLEDIR=${LOADABLE_APPDIR} kconfig-gconf Kconfig

# export
#
# The export target will package the TinyAra libraries and header files into
# an exportable package.  Caveats: (1) These needs some extension for the KERNEL
# build; it needs to receive USERLIBS and create a libuser.a). (2) The logic
# in tools/mkexport.sh only supports GCC and, for example, explicitly assumes
# that the archiver is 'ar'

export: pass2deps
	$(Q) MAKE=${MAKE} $(MKEXPORT) $(MKEXPORT_ARGS) -l "$(EXPORTLIBS)"

# General housekeeping targets:  dependencies, cleaning, etc.
#
# depend:    Create both PASS1 and PASS2 dependencies
# clean:     Removes derived object files, archives, executables, and
#            temporary files, but retains the configuration and context
#            files and directories.
# distclean: Does 'clean' then also removes all configuration and context
#            files.  This essentially restores the directory structure
#            to its original, unconfigured stated.

depend: pass1dep pass2dep

subdir_clean:
	$(Q) for dir in $(CLEANDIRS) ; do \
		if [ -e $$dir/Makefile ]; then \
			$(MAKE) -C $$dir TOPDIR="$(TOPDIR)" EXTDIR="$(EXTDIR)" LOADABLEDIR="${LOADABLE_APPDIR}" clean ; \
		fi \
	done
	$(Q) $(MAKE) -C tools -f Makefile.host TOPDIR="$(TOPDIR)" clean

clean: subdir_clean
	$(call DELDIR, $(OUTBIN_DIR)/*)
	$(call DELFILE, _SAVED_APPS_config)
	$(call DELFILE, tinyara-export*)
	$(call DELFILE, tinyara_user*)
	$(call DELFILE, build.log*)
	$(call CLEAN)

subdir_distclean:
	$(Q) for dir in $(CLEANDIRS) ; do \
		if [ -e $$dir/Makefile ]; then \
			$(MAKE) -C $$dir TOPDIR="$(TOPDIR)" EXTDIR="$(EXTDIR)" LOADABLEDIR="${LOADABLE_APPDIR}" distclean ; \
		fi \
	done

memstat:
ifneq ($(MEMSTATS),)
	$(Q) python ./tools/memstats_$(MEMSTATS).py -l -f ../build/output/bin/tinyara.map
	$(Q) python ./tools/memstats_$(MEMSTATS).py -a -f ../build/output/bin/tinyara.map -o ../build/output/bin/tinyara_memstats.txt
endif

distclean: clean subdir_distclean clean_context
	$(call DELFILE, Make.defs)
	$(call DELFILE, setenv.sh)
	$(call DELFILE, setenv.bat)
	$(call DELFILE, .config)
	$(call DELFILE, .config.old)
	$(call DELFILE, .version)
	$(call DELFILE, .appSpec)
	$(call DELFILE, .bininfo)

# Application housekeeping targets.  The APPDIR variable refers to the user
# application directory.  A sample apps/ directory is included with TinyAra,
# however, this is not treated as part of TinyAra and may be replaced with a
# different application directory.  For the most part, the application
# directory is treated like any other build directory in this script.  However,
# as a convenience, the following targets are included to support housekeeping
# functions in the user application directory from the TinyAra build directory.
#
# apps_preconfig: Prepare applications to be configured
# apps_clean:     Perform the clean operation only in the user application
#                 directory
# apps_distclean: Perform the distclean operation only in the user application
#                 directory.
# applist:        Make applist metafile(appSpec) using application config information.
# appupdate:      Update .config file using metafile(appSpec) and remove .appSpec.

apps_preconfig:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(APPDIR)" TOPDIR="$(TOPDIR)" preconfig
endif
ifneq ($(LOADABLE_APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(LOADABLE_APPDIR)" TOPDIR="$(TOPDIR)" LOADABLEDIR=${LOADABLE_APPDIR} preconfig
endif

apps_clean:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(APPDIR)" TOPDIR="$(TOPDIR)" clean
endif

apps_distclean:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(APPDIR)" TOPDIR="$(TOPDIR)" distclean
endif

applist:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(APPDIR)" TOPDIR="$(TOPDIR)" applist
endif

appupdate:
ifneq ($(APPDIR),)
	$(Q) $(MAKE) -C "$(TOPDIR)/$(APPDIR)" TOPDIR="$(TOPDIR)" appupdate
endif

# romfs
#
# The romfs target will make a romfs image by calling mkromfsimg.sh.
# The content of romfs should be in $(TOPDIR)/../tools/fs/contents-romfs folder.

romfs:
ifeq ($(CONFIG_FS_ROMFS),y)
	$(Q) ../tools/fs/mkromfsimg.sh
endif

# tools/compression/mkcompresstool.sh
#
# This target will make a compression tool by calling mkcompresstool.sh.
# This compression tool (mkcompressimg) will be used to compress binaries.
# Hence, this tool needs to be created before we build those binaries.

tools/compression/mkcompresstool.sh: include/tinyara/config.h
ifeq ($(CONFIG_COMPRESSED_BINARY),y)
	$(Q) tools/compression/mkcompresstool.sh
endif

# smartfs
#
# The smartfs target will make a smartfs image by calling mksmartfsimg.sh and mknxfuse.sh
# Contents need to be placed in $(TOPDIR)/../tools/fs/contents-smartfs/$BOARDNAME/base-files folder
smartfs: include/tinyara/config.h
	$(Q) ./../tools/nxfuse/mknxfuse.sh
	$(Q) ./../tools/nxfuse/mksmartfsimg.sh
