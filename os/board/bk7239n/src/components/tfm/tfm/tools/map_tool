#!/usr/bin/env python3
# encoding=utf-8
import sys
import re
import linecache
from openpyxl import Workbook
from openpyxl.chart import BarChart, Reference

if (len(sys.argv) < 2):
    print('arg error: try to use \'python3 map_tool xxx.map\'')
    exit(1)

if (".map" not in sys.argv[1]):
    print('arg error: try to use \'python3 map_tool xxx.map\'')
    exit(2)

MAP_FILE = sys.argv[1]
MAP_FILE_OUT = sys.argv[1].replace('.map', '.xlsx')

print('================================================')
print('Please make sure that all *.c & *.s were bulid in libs first, otherwise it will ignored in the result .xlsx !!!')

with open(MAP_FILE,"r") as mf:
    line = 0
    work_total = {}
    b_serach = False
    for info in mf.readlines():
        workbook_info = {}
        section_info = []
        line = line + 1
        if ("Memory Configuration" in info) and (b_serach == False):
            b_serach = True
        elif (("OUTPUT(" in info) and (b_serach == True)):
            break
        if b_serach == True:
            if ((".obj" in info) or (".o" in info)) and "0x" in info and ".a(" in info:
                c = re.compile("^\s*(\.[\.\w]+)\s+(\w+)\s+(\w+)\s+(.*)$")
                m = c.match(info)
                if m:
                    i_address = int(m.group(2),16)
                    i_size = int(m.group(3),16)
                    if ((i_address != 0) and (i_size != 0)):
                        lib_name = re.compile('.*(lib.+)[(]').findall(m.group(4))
                        if lib_name[0].find('/') != -1:
                            lib_name = re.compile('.*(lib.+)').findall(lib_name[0])
                        section_info.append([line,m.group(1),m.group(2),m.group(3),m.group(4)])
                        workbook_info[lib_name[0]] = section_info[0]
                        work_total[line] = workbook_info
                else:
                    para_name = linecache.getline(MAP_FILE,line - 1)
                    para_name = para_name.replace('\n','')
                    c = re.compile("^\s*(\w+)\s+(\w+)\s+(.*)$")
                    m = c.match(info)
                    if m:
                        if m.group(1).find('0x') == -1:
                            continue
                        i_address = int(m.group(1),16)
                        i_size = int(m.group(2),16)
                        if ((i_address != 0) and (i_size != 0)):
                            lib_name = re.compile('.*(lib.+)[(]').findall(m.group(3))
                            if lib_name[0].find('/') != -1:
                                lib_name = re.compile('.*(lib.+)').findall(lib_name[0])
                            section_info.append([line,para_name,m.group(1),m.group(2),m.group(3)])
                            workbook_info[lib_name[0]] = section_info[0]
                            work_total[line] = workbook_info

    #write excel
    wb = Workbook()
    for work_line in work_total:
        for key,value in work_total[work_line].items():
            wb_sheet_name = str(key)
            wb_sheet_value = value
        b_is_find_sheet = False
        for sheet_name in wb.sheetnames:
            if sheet_name == wb_sheet_name:
                b_is_find_sheet = True
        if b_is_find_sheet == False:
            wb1 = wb.create_sheet(str(wb_sheet_name),0)
            wb1.append(['num','para_name', 'address','size', 'lib_name'])
            wb1.column_dimensions['B'].width = 50
            wb1.column_dimensions['C'].width = 20
            wb1.column_dimensions['D'].width = 10
            wb1.column_dimensions['E'].width = 50

        for sheet_name in wb.sheetnames:
            if sheet_name == wb_sheet_name:
                ws = wb[sheet_name]
                ws.append(wb_sheet_value)

    #根据size排序，从大到小
    for sheet_name in wb.sheetnames:
        ws = wb[sheet_name]
        row_lst = []
        for row in ws.rows:
            row_data = [cell.value for cell in row]
            row_lst.append(row_data)
        score_lst = row_lst[1:]
        score_lst = sorted(score_lst, key=lambda x:int(x[3],16),reverse=True)
        ws.delete_rows(2,ws.max_row)
        for lst in score_lst:
            ws.append(lst)

    #分模块统计各section的大小，以及占flash和ram的大小
    chart_info = {}
    all_info = {}
    total_flash_size = 0
    total_ram_size = 0
    title_info = ['lib_name', 'flash', 'ram' ]
    for sheet_name in wb.sheetnames:
        if(sheet_name == 'Sheet'):
            continue
        ws = wb[sheet_name]
        i_flash_size = 0
        i_ram_size = 0
        section_info = {'flash': 0, 'ram': 0}
        for row_info in ws.iter_rows(min_row=2,min_col=2,max_col=4):
            # 列出段名
            section_name = re.compile('^\ ?\.(\w+)').findall(row_info[0].value)
            i_cell_size = int(row_info[2].value,16)
            if len(section_name) == 0:
                continue
            # 统计共出现哪些段，放入title_info中
            if section_name[0] not in title_info:
                title_info.append(section_name[0])
            # 模块中出现的段，若新增，设为0，否则累加
            if section_info.get(section_name[0])  == None:
                section_info[section_name[0]] = i_cell_size
            else:
                section_info[section_name[0]] += i_cell_size
            # 模块占flash和ram的大小：ram=data+bss, flash=data+others
            if(section_name[0] == "bss"):
                i_ram_size += i_cell_size
            elif(section_name[0] == "data"):
                i_ram_size += i_cell_size
                i_flash_size += i_cell_size
            else:
                i_flash_size += i_cell_size
        section_info['ram'] = i_ram_size
        section_info['flash'] = i_flash_size
        # 将模块中 section信息写入表尾
        for lst_name, lst_val in section_info.items():
            ws.append([lst_name,'','',lst_val,''])
        # 将模块section信息写入all_info，后面写入总览表中
        chart_info[sheet_name] = 0
        all_info[sheet_name] = section_info
        total_flash_size += i_flash_size
        total_ram_size += i_ram_size

    #画总览图和表
    zip(*chart_info)
    wb1 = wb.create_sheet("柱状图总览",0)
    wb1.column_dimensions['A'].width = 20
    wb1.append(title_info)
    #归类并统计
    score_lst = []
    for lst_name, lst_val in all_info.items():
        row_info = [lst_name, ]
        for name in title_info:
            if name == 'lib_name':
                continue
            elif lst_val.get(name)  == None:
                row_info.append(0)
            else:
                row_info.append(lst_val[name])
        score_lst.append(row_info)
    # 排序:按flash大小降序
    score_lst = sorted(score_lst, key=lambda x:x[1],reverse=True)
    # 写入列表
    for lst in score_lst:
        wb1.append(lst)
    wb1.append(["total", total_flash_size, total_ram_size])
    #设置柱状图属性，type = col 为列状图，type = bar 为水平图
    chart1 = BarChart()
    chart1.type = "col"
    chart1.style = 10
    chart1.title = "Size usage"
    chart1.y_axis.title = '使用量'
    chart1.x_axis.title = 'lib 库名称'
    # 设置纵坐标的值范围，包括纵坐标的标题在内
    data = Reference(wb1, min_col=2, max_col=3, min_row=2, max_row=len(all_info)+1)
    chart1.add_data(data, titles_from_data=False)
    # 设置横坐标的值，如果只设置min_col则，max_col=min_col
    series = Reference(wb1, min_col=1, min_row=2, max_row=len(all_info)+1)
    # 设置横坐标
    chart1.set_categories(series)
    chart1.width = 40
    chart1.height = 18
    # 定锚点
    archo = 'A' + str(wb1._current_row + 2)
    wb1.add_chart(chart1, archo)
    #保存，退出
    wb.save(MAP_FILE_OUT)

print('map successed, see', MAP_FILE_OUT)
print('================================================')
exit(0)
