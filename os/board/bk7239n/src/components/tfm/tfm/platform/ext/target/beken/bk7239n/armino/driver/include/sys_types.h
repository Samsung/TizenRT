// Copyright 2021-2025 Beken
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <soc/soc.h>
#include "system_hw.h"

#ifdef __cplusplus
extern "C" {
#endif

//int_0_31_en DIRTY define
#define DMA0_NSEC_INTERRUPT_CTRL_BIT   (1 << SYS_CPU0_INT_0_31_EN_CPU0_DMA_NSEC_INTR_EN_POS)
#define ENCP_SEC_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_0_31_EN_CPU0_ENCP_SEC_INTR_EN_POS)
#define ENCP_NSEC_INTERRUPT_CTRL_BIT   (1 << SYS_CPU0_INT_0_31_EN_CPU0_ENCP_NSEC_INTR_EN_POS)
#define TIMER_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_TIMER_INT_EN_POS)
#define UART0_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_RESERVED_BIT_4_4_POS)
#define PWM_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_PWM0_INT_EN_POS)
#define I2C_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2C0_INT_EN_POS)
#define SPI_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_SPI0_INT_EN_POS)
#define SADC_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_RESERVED_BIT_8_8_POS)
#define UART3_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART3_INT_EN_POS)
#define SDIO_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_SDIO_INT_EN_POS)
#define GDMA_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_GDMA_INT_EN_POS)
#define LA_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_0_31_EN_CPU0_LA_INT_EN_POS)
#define TIMER1_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_0_31_EN_CPU0_TIMER1_INT_EN_POS)
#define I2C1_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2C1_INT_EN_POS)
#define UART1_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART1_INT_EN_POS)
#define UART2_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART2_INT_EN_POS)
#define SPI1_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_SPI1_INT_EN_POS)
#define LED_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_LED_INT_EN_POS)
#define TAMPER_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_0_31_EN_CPU0_TAMPER_INT_EN_POS)
#define RESV_20_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV1_INT_EN_POS)
#define CKMN_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_CKMN_INT_EN_POS)
#define RESV_22_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV2_INT_EN_POS)
#define RESV_23_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV3_INT_EN_POS)
#define I2S_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2S0_INT_EN_POS)
#define RESV_25_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV4_INT_EN_POS)
#define RESV_26_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV5_INT_EN_POS)
#define RESV_27_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV6_INT_EN_POS)
#define RESV_28_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV7_INT_EN_POS)
#define WIFI_MAC_WAKEUP_INT_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_INT_MAC_WAKEUP_INT_EN_POS)
#define WIFI_HSU_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_0_31_EN_CPU0_HSU_IRQ_INT_EN_POS)
#define WIFI_MAC_GEN_INT_BIT           (1 << SYS_CPU0_INT_0_31_EN_CPU0_MAC_INT_GEN_INT_EN_POS)

//int_32_63_en
#define WIFI_MAC_PORT_TRIGGER_INT_BIT  (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_PORT_TRIGGER_INT_EN_POS)
#define WIFI_MAC_TX_TRIGGER_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_TRIGGER_INT_EN_POS)
#define WIFI_MAC_RX_TRIGGER_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_RX_TRIGGER_INT_EN_POS)
#define WIFI_MAC_TX_RX_MISC_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_RX_MISC_INT_EN_POS)
#define WIFI_MAC_TX_RX_TIMER_INT_BIT   (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_RX_TIMER_INT_EN_POS)
#define PHY_RIU_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_PHY_RIU_INT_INT_EN_POS)
#define PHY_MBP_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_PHY_MBP_INT_INT_EN_POS)
#define BT_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_32_63_EN_CPU0_BT_IRQ_INT_EN_POS)
#define BLE_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_32_63_EN_CPU0_BLE_IRQ_INT_EN_POS)
#define DM_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_32_63_EN_CPU0_DM_IRQ_INT_EN_POS)
#define QSPI0_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_QSPI1_INT_EN_POS)
#define RESV8_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV8_INT_EN_POS)
#define RESV9_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV9_INT_EN_POS)
#define RESV10_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV10_INT_EN_POS)
#define RESV11_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV11_INT_EN_POS)
#define RESV12_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV12_INT_EN_POS)
#define THREAD_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_THREAD_INT_EN_POS)
#define RESV13_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV13_INT_EN_POS)
#define OTP_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_32_63_EN_CPU0_OTP_INT_EN_POS)
#define DPLL_UNLOCK_INTERRUPT_CTRL_BIT (1 << SYS_CPU0_INT_32_63_EN_CPU0_DPLLUNLOCK_INT_EN_POS)
#define RESV14_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV14_INT_EN_POS)
#define RESV15_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV15_INT_EN_POS)
#define RESV16_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV16_INT_EN_POS)
#define GPIO_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_32_63_EN_CPU0_GPIO_S_INT_EN_POS)
#define GPIO_NS_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_GPIO_NS_INT_EN_POS)
#define RESV25_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV25_POS)
#define ANA_GPIO_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_32_63_EN_ANA_GPIO_POS)
#define ANA_RTC_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_ANA_RTC_POS)
#define ABNORMAL_GPIO_INTERRUPT_CTRL_BIT  (1 << SYS_CPU0_INT_32_63_EN_ABNORMAL_GPIO_POS)
#define ABNORMAL_RTC_INTERRUPT_CTRL_BIT (1 << SYS_CPU0_INT_32_63_EN_ABNORMAL_RTC_POS)
#define RESV30_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV30_POS)
#define RESV31_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV31_POS)

#if 1 //TODO fixme
#define PWM1_INTERRUPT_CTRL_BIT        (1 << 31)
#define WIFI_MODEM_EN                  (1 << 31)
#define WIFI_MODEM_RC_EN               (1 << 31)
#define DMA1_SEC_INTERRUPT_CTRL_BIT    (1 << 31)
#define DMA1_NSEC_INTERRUPT_CTRL_BIT   (1 << 31)
#endif

#ifdef CONFIG_EXTERN_32K
#define RTC_CLOCK_FREQ				(32768)
#else
#define RTC_CLOCK_FREQ				(32000)
#endif

#define FREQUNCY_DIV_MAX                              (15)
#define FREQUNCY_DIV_BUS_MAX                          (1)
#define FREQUNCY_DIV_CPU_MAX                          (1)


#define RTC_TICKS_PER_1MS				((float)RTC_CLOCK_FREQ/1000)

typedef enum
{
	UART_CLK_DIV_1 = 0,
	UART_CLK_DIV_2,
	UART_CLK_DIV_4,
	UART_CLK_DIV_8,
}uart_clk_div_t;

typedef enum
{
	FLASH_CLK_DIV_1 = 0,
	FLASH_CLK_DIV_2,
	FLASH_CLK_DIV_4,
	FLASH_CLK_DIV_8,
	FLASH_CLK_DIV_MAX,
}flash_clk_div_t;

typedef enum
{
	FLASH_CLK_XTAL = 0,
	FLASH_CLK_80M  = 2,
	FLASH_CLK_120M = 3,
}flash_clk_src_t;

/*clock power control start*/
typedef enum	//SYS TYPES index is from 1~X
{
	CLK_PWR_ID_I2C1 = 0,
	CLK_PWR_ID_SPI_1,
	CLK_PWR_ID_UART1,
	CLK_PWR_ID_PWM_1,
	CLK_PWR_ID_TIMER_1,
	CLK_PWR_ID_SARADC,
	CLK_PWR_ID_UART4,
	CLK_PWR_ID_GPIO,
	CLK_PWR_ID_I2C2,
	CLK_PWR_ID_SPI_2,
	CLK_PWR_ID_UART2,
	CLK_PWR_ID_UART3,
	CLK_PWR_ID_RESV12,
	CLK_PWR_ID_TIMER_2,
	CLK_PWR_ID_RESV14,
	CLK_PWR_ID_OTP,
	CLK_PWR_ID_I2S_1,
	CLK_PWR_ID_LED,
	CLK_PWR_ID_TAMPER,
	CLK_PWR_ID_PSRAM,
	CLK_PWR_ID_DPLLDIV,
	CLK_PWR_ID_QSPI_1,
	CLK_PWR_ID_SDIO,
	CLK_PWR_ID_AUXS,
	CLK_PWR_ID_BTDM,
	CLK_PWR_ID_XVR,
	CLK_PWR_ID_MAC,
	CLK_PWR_ID_PHY,
	CLK_PWR_ID_THREAD,
	CLK_PWR_ID_RF,
	CLK_PWR_ID_RESV30,
	CLK_PWR_ID_WDG_CPU,
	CLK_PWR_ID_NONE,
	CLK_PWR_ID_PWM_2, // delete TODO wangzhilei
	CLK_PWR_ID_TIMER_3, //TODO wangzhilei
}dev_clk_pwr_id_t;

typedef enum
{
	CLK_PWR_CTRL_PWR_DOWN = 0,
	CLK_PWR_CTRL_PWR_UP,
}dev_clk_pwr_ctrl_t;

/*
clock select for periphral unit
*/
typedef enum
{
	CLK_SEL_ID_26M = 0,
	CLK_SEL_ID_WDT,
	CLK_SEL_ID_SPI0,
	CLK_SEL_ID_SPI1,
	CLK_SEL_ID_QSPI0,
	CLK_SEL_ID_QSPI1,
	CLK_SEL_ID_DISP,
	CLK_SEL_ID_PSRAM,
	CLK_SEL_ID_SDIO,
	CLK_SEL_ID_AUXS,
	CLK_SEL_ID_FLASH,
	CLK_SEL_ID_I2S,
	CLK_SEL_ID_CORE,
	CLK_SEL_ID_UART0,
	CLK_SEL_ID_UART1,
	CLK_SEL_ID_UART2,
	CLK_SEL_ID_SADC,
	CLK_SEL_ID_PWM0,
	CLK_SEL_ID_PWM1,
	CLK_SEL_ID_TIMER0,
	CLK_SEL_ID_TIMER1,
	CLK_SEL_ID_TIMER2,
	CLK_SEL_ID_AUDIO,
	CLK_SEL_ID_JPEG,
}dev_clk_select_id_t;

typedef enum
{
	CLK_SEL_DCO = 0,
	CLK_SEL_XTL_26M,
	CLK_SEL_32K,
	CLK_SEL_APLL,
	CLK_SEL_DPLL,
	CLK_SEL_320M,
	CLK_SEL_480M,
}dev_clk_select_t;

typedef enum
{
	CLK_DIV_1 = 1,
	CLK_DIV_2 = 2,
	CLK_DIV_4 = 4,
	CLK_DIV_6 = 6,
	CLK_DIV_8 = 8,
	CLK_DIV_10 = 10,
	CLK_DIV_12 = 12,
	CLK_DIV_16 = 16,
	CLK_DIV_32 = 32,
	CLK_DIV_64 = 64,
	CLK_DIV_256 = 256,
}dev_clk_div_t;

typedef enum
{
	CLK_DCO_DIV_1 = 0,
	CLK_DCO_DIV_2,
	CLK_DCO_DIV_4,
	CLK_DCO_DIV_8
}dev_clk_dco_div_t;


/*clock power control end*/


typedef enum
{
	HIGH_FREQUECY_CLOCK_MODULE_CPU0 = 0,
	HIGH_FREQUECY_CLOCK_MODULE_CPU1,
	HIGH_FREQUECY_CLOCK_MODULE_CPU0_MATRIX,
	HIGH_FREQUECY_CLOCK_MODULE_CPU1_MATRIX,
	HIGH_FREQUECY_CLOCK_MODULE_SDIO,
	HIGH_FREQUECY_CLOCK_MODULE_QSPI,
	HIGH_FREQUECY_CLOCK_MODULE_PSRAM,
	HIGH_FREQUECY_CLOCK_MODULE_DISP,
	HIGH_FREQUECY_CLOCK_MODULE_JPEG,
	HIGH_FREQUECY_CLOCK_MODULE_FLASH,
	HIGH_FREQUECY_CLOCK_MODULE_USB,
	HIGH_FREQUECY_CLOCK_MODULE_NONE
}high_clock_module_name_t;
typedef enum
{
	CHARGE_STEP1 = 0,
	CHARGE_STEP2,
	CHARGE_STEP3,
	CHARGE_STEP4,
} sys_drv_charge_step_t;
typedef enum
{
	ANALOG_REG0 = 0,
	ANALOG_REG1,
	ANALOG_REG2,
	ANALOG_REG3,
	ANALOG_REG4,
	ANALOG_REG5,
	ANALOG_REG6,
    ANALOG_REG7,
	ANALOG_REG8,
	ANALOG_REG9,
	ANALOG_REG10,
	ANALOG_REG11,
	ANALOG_REG12,
	ANALOG_REG13,
    ANALOG_REG14,
	ANALOG_REG15,
	ANALOG_REG16,
	ANALOG_REG17,
	ANALOG_REG18,
	ANALOG_REG19,
	ANALOG_REG20,
	ANALOG_REG21,
	ANALOG_REG22,
	ANALOG_REG23,
	ANALOG_REG24,
	ANALOG_REG25,
	ANALOG_REG26,
	ANALOG_REG27,
	ANALOG_MAX
} analog_reg_t;

typedef enum
{
	CLK_DIV_REG0 = 0,
	CLK_DIV_REG1,
	CLK_DIV_REG2,
	CLK_DIV_NONE
} clk_div_reg_e;
#define CLK_DIV_ADDRESS_MAP  \
{	\
	{CLK_DIV_REG0, SYS_CPU_CLK_DIV_MODE1_ADDR, }, \
	{CLK_DIV_REG1, SYS_CPU_CLK_DIV_MODE2_ADDR, }, \
	{CLK_DIV_REG2, SYS_CPU_26M_WDT_CLK_DIV_ADDR, }, \
}
typedef struct {
	clk_div_reg_e clk_div_reg;
	uint32_t reg_address;
} clk_div_address_map_t;

typedef enum
{
    SARADC_CLK_SRC_XTAL = 0,
    SARADC_CLK_SRC_APLL,
    SARADC_CLK_SRC_UNKNOW = 0xff
} sys_saradc_clk_sel_t;

typedef enum
{
    SPI_CLK_SRC_XTAL = 0,
    SPI_CLK_SRC_APLL,
    SPI_CLK_SRC_UNKNOW = 0xff
} sys_spi_clk_sel_t;

typedef enum
{
    PWM_CLK_SRC_32K = 0,
    PWM_CLK_SRC_XTAL,
    PWM_CLK_SRC_UNKNOW = 0xff
} sys_pwm_clk_sel_t;

typedef enum
{
	LPO_SRC_DIVD = 0,//32K from 26m
	LPO_SRC_X32K,    //extern 32k
	LPO_SRC_ROSC,    //32K from ROSC
	LPO_SRC_DEFAULT  //32K from ROSC
}lpo_src_e;

typedef enum
{
	QSPI_CLK_320M = 0,
	QSPI_CLK_480M,
	QSPI_CLK_XTAL,
	QSPI_CLK_60M,
	QSPI_CLK_80M,
} sys_qspi_clk_src_t;

typedef enum
{
	RF_CTRL_PTA = 0,
	RF_CTRL_WIFI,
	RF_CTRL_BT,
	RF_CTRL_THREAD,
}rf_ctrl_t;

typedef enum _dco_speed
{
	DCO_CALIB_SPEED_26M,
	DCO_CALIB_SPEED_60M,
	DCO_CALIB_SPEED_80M,
	DCO_CALIB_SPEED_120M,
	DCO_CALIB_SPEED_240M,
	DCO_CALIB_SPEED_320M,
	DCO_CALIB_SPEED_480M,
}dco_cali_speed_e;

typedef enum
{
	CPU_FRQ_30M = 0,   // 0:CPU:30M,BUS:30M
	CPU_FRQ_26M = 1,  // 0:CPU:26M,BUS:26M
	CPU_FRQ_60M,      // 1:CPU0/CPU1:60M,BUS:60M
	CPU_FRQ_80M,      // 2:CPU0/CPU1:80M,BUS:80M
	CPU_FRQ_120M,     // 3:CPU0/CPU1:120M,BUS:120M
	CPU_FRQ_160M,     // 4:CPU0/CPU1:160M,BUS:160M
	CPU_FRQ_240M,     // 5:CPU0/CPU1:240M,BUS:240M
	CPU_FRQ_320M,     // 6:CPU0:160m,CPU1:320M,BUS:160M
	CPU_FRQ_480M,     // 7:CPU0:240m,CPU1:480M,BUS:240M
	CPU_FRQ_DEFAULT   // default cpu frequency which control by pm module
}cpu_freq_e;
#ifdef __cplusplus
}
#endif
