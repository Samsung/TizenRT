/*
 * Copyright (c) 2019-2022, Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

/***********{{utilities.donotedit_warning}}***********/

#ifndef __TFM_SPM_DB_FUNC_INC__
#define __TFM_SPM_DB_FUNC_INC__

#include "array.h"
#include "psa_manifest/sid.h"

{# Produce a build error if heap_size is presented in the manifest, because of the dynamic memory allocation is not supported now. #}
{% for partition in partitions %}
    {% if partition.manifest.heap_size %}
#error "Please do not add 'heap_size' for partition '{{partition.manifest.name}}', the dynamic memory allocation is not supported now!"
    {% endif %}
{% endfor %}
/**************************************************************************/
/** IRQ count per partition */
/**************************************************************************/
{% for partition in partitions %}
    {% if partition.manifest.irqs %}
#define TFM_PARTITION_{{partition.manifest.name}}_IRQ_COUNT {{partition.manifest.irqs | length() }}
    {% else %}
#define TFM_PARTITION_{{partition.manifest.name}}_IRQ_COUNT 0
    {% endif %}

{% endfor %}
/**************************************************************************/
/** Declarations of partition init functions */
/**************************************************************************/
{% for partition in partitions %}
    {% if partition.manifest.entry_point %}
extern void {{partition.manifest.entry_point}}(void);
    {% elif partition.manifest.entry_init %}
extern void {{partition.manifest.entry_init}}(void);
    {% endif %}
{% endfor %}
/**************************************************************************/
/** Context stacks for IRQ handling */
/**************************************************************************/
/* The max size of the context stack can be calculated as a function of the IRQ
 * count of the secure partition:
 *
 * max_stack_size = intr_ctx_size + (IRQ_CNT * (intr_ctx_size + hndl_ctx_size))
 *
 * where:
 *   intr_ctx: Frame pushed when the partition is interrupted
 *   hndl_ctx: Frame pushed when the partition is handling an interrupt
 */
static uint32_t ns_interrupt_ctx_stack[
        sizeof(struct interrupted_ctx_stack_frame_t) / sizeof(uint32_t)];

static uint32_t tfm_core_interrupt_ctx_stack[
        sizeof(struct interrupted_ctx_stack_frame_t) / sizeof(uint32_t)];

{% for partition in partitions %}
static uint32_t ctx_stack_{{partition.manifest.name}}[
        (sizeof(struct interrupted_ctx_stack_frame_t) +
            (TFM_PARTITION_{{partition.manifest.name}}_IRQ_COUNT) * (
                sizeof(struct interrupted_ctx_stack_frame_t) +
                sizeof(struct handler_ctx_stack_frame_t)
        )) / sizeof(uint32_t)];

{% endfor %}
uint32_t *ctx_stack_list[] =
{
    ns_interrupt_ctx_stack,
    tfm_core_interrupt_ctx_stack,
{% for partition in partitions %}
    ctx_stack_{{partition.manifest.name}},
{% endfor %}
};

/**************************************************************************/
/** Dependencies array for Secure Partition */
/**************************************************************************/
{% for partition in partitions %}
    {% if partition.manifest.dependencies %}
static int32_t dependencies_{{partition.manifest.name}}[] =
{
        {% for dependence in partition.manifest.dependencies %}
            {% for service in partition.manifest.services %}
                {% if dependence == service.name %}
#error "Please DO NOT include SP's own RoT Service '{{dependence}}', which will cause a deadlock!"
                {% endif %}
            {% endfor %}
    {{dependence}}_SID,
        {% endfor %}
};

    {% endif %}
{% endfor %}
/**************************************************************************/
/** The static data of the partition list */
/**************************************************************************/
const struct spm_partition_static_data_t static_data_list[] =
{
    {
        .partition_id         = TFM_SP_NON_SECURE_ID,
        .partition_flags      = 0,
    },

    {
        .partition_id         = TFM_SP_CORE_ID,
        .partition_flags      = SPM_PART_FLAG_APP_ROT | SPM_PART_FLAG_PSA_ROT,
    },

{% for partition in partitions %}
    {{'{'}}
        .partition_id         = {{partition.manifest.name}},
        .partition_flags      = 0
    {% if partition.manifest.type == "APPLICATION-ROT" %}
                              | SPM_PART_FLAG_APP_ROT
    {% elif partition.manifest.type == "PSA-ROT" %}
                              | SPM_PART_FLAG_PSA_ROT | SPM_PART_FLAG_APP_ROT
    {% else %}
#error "Unsupported type '{{partition.manifest.type}}' for partition '{{partition.manifest.name}}'!"
    {% endif %}
                              ,
        .partition_priority   = TFM_PRIORITY({{partition.manifest.priority}}),
    {% if partition.manifest.entry_point %}
        .partition_init       = {{partition.manifest.entry_point}},
    {% elif partition.manifest.entry_init %}
        .partition_init       = {{partition.manifest.entry_init}},
    {% else %}
        .partition_init       = NULL,
    {% endif %}
        .dependencies_num     = {{partition.manifest.dependencies | length()}},
    {% if partition.manifest.dependencies %}
        .p_dependencies       = dependencies_{{partition.manifest.name}},
    {% else %}
        .p_dependencies       = NULL,
    {% endif %}
    {{'},'}}

{% endfor %}
};

/**************************************************************************/
/** The platform data of the partition list */
/**************************************************************************/
{% for partition in partitions %}
    {% if partition.manifest.mmio_regions %}
const struct platform_data_t *
    platform_data_list_{{partition.manifest.name}}[] =
{
        {% for region in partition.manifest.mmio_regions %}
            {% if region.conditional %}
#ifdef {{region.conditional}}
            {% endif %}
    {{region.name}},
            {% if region.conditional %}
#endif /* {{region.conditional}} */
            {% endif %}
        {% endfor %}
    NULL
};

    {% endif %}
{% endfor %}
const struct platform_data_t **platform_data_list_list[] =
{
    NULL,
    NULL,

{% for partition in partitions %}
    {% if partition.manifest.mmio_regions %}
    platform_data_list_{{partition.manifest.name}},
    {% else %}{# if partition.manifest.mmio_regions #}
    NULL,
    {% endif %}{# if partition.manifest.mmio_regions #}

{% endfor %}
};

/**************************************************************************/
/** The partition list for the DB */
/**************************************************************************/
static struct spm_partition_desc_t partition_list [] =
{
    {{'{{0}}'}}, /* placeholder for Non-secure internal partition */
    {{'{{0}}'}},   /* placeholder for TF-M Core internal partition */

{% for partition in partitions %}
    /* -----------------------------------------------------------------------*/
    /* - Partition DB record for {{partition.manifest.name}} */
    /* -----------------------------------------------------------------------*/
    {{'{'}}
    /* Runtime data */
        .runtime_data             = {0},
        .static_data              = NULL,
        .platform_data_list       = NULL,
    {{'},'}}
{% endfor %}
};

struct spm_partition_db_t g_spm_partition_db = {
    .is_init = 0,
    .partition_count = ARRAY_SIZE(partition_list),
    .running_partition_idx = 0,
    .partitions = partition_list,
};

#endif /* __TFM_SPM_DB_FUNC_INC__ */
