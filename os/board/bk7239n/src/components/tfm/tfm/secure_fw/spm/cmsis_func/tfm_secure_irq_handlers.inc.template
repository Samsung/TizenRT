/*
 * Copyright (c) 2018-2022, Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

/***********{{utilities.donotedit_warning}}***********/

#include "psa_manifest/pid.h"

{% for partition in partitions %}
    {% if partition.manifest.irqs %}
        {% if partition.manifest.psa_framework_version != 1.0 %}
#error "Framework version greater than 1.0 is not supported"
        {% endif %}
        {% set irq_signal = namespace(bit=31) %}
        {% for irq in partition.manifest.irqs %}
            {% if (irq_signal.bit) < 4 %}
#error "Too many IRQ signals!"
            {% else %}
#define {{"%-55s"|format(irq.signal)}} (1U << ({{"%d"|format(irq_signal.bit)}}))
                {% set irq_signal.bit = irq_signal.bit - 1 %}
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}
{% macro _irq_record(partition_name, signal, line) -%}
{ {{ partition_name }}, {{ signal }}, {{ line }} },
{%- endmacro %}

/* Definitions of the signals of the IRQs */
const struct tfm_core_irq_signal_data_t tfm_core_irq_signals[] = {
{% for partition in partitions %}
    {% if partition.manifest.irqs %}
        {% for handler in partition.manifest.irqs %}
            {% set irq_data = namespace() %}
            {% if handler.source %}
                {% set irq_data.line = handler.source %}
            {% else %}
#error "Interrupt source isn't provided for 'irqs' in partition {{partition.manifest.name}}"
            {% endif %}
    {{ _irq_record(partition.manifest.name, handler.signal, irq_data.line) }}
        {% endfor %}
   {% endif %}
{% endfor %}
   {0,0,0}                         /* add dummy element to avoid non-standard empty array */
};

const size_t tfm_core_irq_signals_count = (sizeof(tfm_core_irq_signals) /
                                           sizeof(*tfm_core_irq_signals)) - 1;  /* adjust for the dummy element */

extern void priv_irq_handler_main(uint32_t partition_id,
                                  uint32_t unpriv_handler,
                                  uint32_t irq_signal,
                                  uint32_t irq_line);

/* Forward declarations of unpriv IRQ handlers*/
{% for partition in partitions %}
    {% if partition.manifest.irqs %}
        {% for handler in partition.manifest.irqs %}
extern void {{handler.signal}}_isr(void);
        {% endfor %}

    {% endif %}
{% endfor %}

/* Definitions of privileged IRQ handlers */
{% for partition in partitions %}
    {% if partition.manifest.irqs %}
        {% for handler in partition.manifest.irqs %}
            {% if handler.source is number %}
void irq_{{handler.source}}_Handler(void)
            {% elif handler.source %}
void {{handler.source}}_Handler(void)
            {% else %}
#error "Interrupt source isn't provided for 'irqs' in partition {{partition.manifest.name}}"
            {% endif %}
{
            {% if handler.source %}
    priv_irq_handler_main({{partition.manifest.name}},
                          (uint32_t){{handler.signal}}_isr,
                          {{handler.signal}},
                          {{handler.source}});
            {% else %}
#error "Interrupt source isn't provided for 'irqs' in partition {{partition.manifest.name}}"
            {% endif %}
}

        {% endfor %}

    {% endif %}
{% endfor %}
