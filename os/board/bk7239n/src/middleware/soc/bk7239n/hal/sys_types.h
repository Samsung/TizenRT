// Copyright 2021-2025 Beken
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <soc/soc.h>
#include "system_hw.h"

#ifdef __cplusplus
extern "C" {
#endif

//int_0_31_en DIRTY define
#define DMA0_NSEC_INTERRUPT_CTRL_BIT   (1 << SYS_CPU0_INT_0_31_EN_CPU0_DMA_NSEC_INTR_EN_POS)
#define ENCP_SEC_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_0_31_EN_CPU0_ENCP_SEC_INTR_EN_POS)
#define ENCP_NSEC_INTERRUPT_CTRL_BIT   (1 << SYS_CPU0_INT_0_31_EN_CPU0_ENCP_NSEC_INTR_EN_POS)
#define TIMER_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_TIMER_INT_EN_POS)
#define UART0_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_RESERVED_BIT_4_4_POS)
#define PWM_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_PWM0_INT_EN_POS)
#define I2C_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2C0_INT_EN_POS)
#define SPI_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_SPI0_INT_EN_POS)
#define SADC_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_RESERVED_BIT_8_8_POS)
#define UART3_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART3_INT_EN_POS)
#define SDIO_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_SDIO_INT_EN_POS)
#define GDMA_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_GDMA_INT_EN_POS)
#define LA_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_0_31_EN_CPU0_LA_INT_EN_POS)
#define TIMER1_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_0_31_EN_CPU0_TIMER1_INT_EN_POS)
#define I2C1_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2C1_INT_EN_POS)
#define UART1_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART1_INT_EN_POS)
#define UART2_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_0_31_EN_CPU0_UART2_INT_EN_POS)
#define SPI1_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_SPI1_INT_EN_POS)
#define LED_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_LED_INT_EN_POS)
#define RESV_19_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV0_INT_EN_POS)
#define RESV_20_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV1_INT_EN_POS)
#define CKMN_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_CKMN_INT_EN_POS)
#define RESV_22_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV2_INT_EN_POS)
#define RESV_23_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV3_INT_EN_POS)
#define I2S_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_0_31_EN_CPU0_I2S0_INT_EN_POS)
#define RESV_25_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV4_INT_EN_POS)
#define RESV_26_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV5_INT_EN_POS)
#define RESV_27_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV6_INT_EN_POS)
#define RESV_28_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_0_31_EN_CPU0_RESV7_INT_EN_POS)
#define WIFI_MAC_WAKEUP_INT_BIT        (1 << SYS_CPU0_INT_0_31_EN_CPU0_INT_MAC_WAKEUP_INT_EN_POS)
#define WIFI_HSU_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_0_31_EN_CPU0_HSU_IRQ_INT_EN_POS)
#define WIFI_MAC_GEN_INT_BIT           (1 << SYS_CPU0_INT_0_31_EN_CPU0_MAC_INT_GEN_INT_EN_POS)

//int_32_63_en
#define WIFI_MAC_PORT_TRIGGER_INT_BIT  (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_PORT_TRIGGER_INT_EN_POS)
#define WIFI_MAC_TX_TRIGGER_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_TRIGGER_INT_EN_POS)
#define WIFI_MAC_RX_TRIGGER_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_RX_TRIGGER_INT_EN_POS)
#define WIFI_MAC_TX_RX_MISC_INT_BIT    (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_RX_MISC_INT_EN_POS)
#define WIFI_MAC_TX_RX_TIMER_INT_BIT   (1 << SYS_CPU0_INT_32_63_EN_CPU0_MAC_INT_TX_RX_TIMER_INT_EN_POS)
#define PHY_RIU_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_PHY_RIU_INT_INT_EN_POS)
#define PHY_MBP_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_PHY_MBP_INT_INT_EN_POS)
#define BT_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_32_63_EN_CPU0_BT_IRQ_INT_EN_POS)
#define BLE_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_32_63_EN_CPU0_BLE_IRQ_INT_EN_POS)
#define DM_INTERRUPT_CTRL_BIT          (1 << SYS_CPU0_INT_32_63_EN_CPU0_DM_IRQ_INT_EN_POS)
#define QSPI0_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_QSPI1_INT_EN_POS)
#define RESV8_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV8_INT_EN_POS)
#define RESV9_INTERRUPT_CTRL_BIT       (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV9_INT_EN_POS)
#define RESV10_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV10_INT_EN_POS)
#define RESV11_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV11_INT_EN_POS)
#define RESV12_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV12_INT_EN_POS)
#define THREAD_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_THREAD_INT_EN_POS)
#define RESV13_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV13_INT_EN_POS)
#define OTP_INTERRUPT_CTRL_BIT         (1 << SYS_CPU0_INT_32_63_EN_CPU0_OTP_INT_EN_POS)
#define DPLL_UNLOCK_INTERRUPT_CTRL_BIT (1 << SYS_CPU0_INT_32_63_EN_CPU0_DPLLUNLOCK_INT_EN_POS)
#define RESV14_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV14_INT_EN_POS)
#define RESV15_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV15_INT_EN_POS)
#define RESV16_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_CPU0_RESV16_INT_EN_POS)
#define GPIO_INTERRUPT_CTRL_BIT        (1 << SYS_CPU0_INT_32_63_EN_CPU0_GPIO_S_INT_EN_POS)
#define GPIO_NS_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_CPU0_GPIO_NS_INT_EN_POS)
#define RESV25_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV25_POS)
#define ANA_GPIO_INTERRUPT_CTRL_BIT    (1 << SYS_CPU0_INT_32_63_EN_ANA_GPIO_POS)
#define ANA_RTC_INTERRUPT_CTRL_BIT     (1 << SYS_CPU0_INT_32_63_EN_ANA_RTC_POS)
#define ABNORMAL_GPIO_INTERRUPT_CTRL_BIT  (1 << SYS_CPU0_INT_32_63_EN_ABNORMAL_GPIO_POS)
#define ABNORMAL_RTC_INTERRUPT_CTRL_BIT (1 << SYS_CPU0_INT_32_63_EN_ABNORMAL_RTC_POS)
#define RESV30_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV30_POS)
#define RESV31_INTERRUPT_CTRL_BIT      (1 << SYS_CPU0_INT_32_63_EN_RESV31_POS)

#if 1 //TODO fixme
#define PWM1_INTERRUPT_CTRL_BIT        (1 << 31)
#define WIFI_MODEM_EN                  (1 << 31)
#define WIFI_MODEM_RC_EN               (1 << 31)
#define DMA1_SEC_INTERRUPT_CTRL_BIT    (1 << 31)
#define DMA1_NSEC_INTERRUPT_CTRL_BIT   (1 << 31)
#endif

#ifdef CONFIG_EXTERN_32K
#define RTC_CLOCK_FREQ				(32768)
#else
#define RTC_CLOCK_FREQ				(32000)
#endif

#define RTC_TICKS_PER_1MS				((float)RTC_CLOCK_FREQ/1000)
#define LOW_POWER_DPLL_STABILITY_DELAY_TIME              (0.19) // 0.19ms(hardware need at least 180us,because making the precise it use 190us,it will additional add 6us or 2us(external) )
#if (defined(CONFIG_RELEASE_IRAM))
#define LOW_POWER_RESTORE_DELAY_TIME_HARDWARE            (1.00) //0.6ms,cpu 60M 0.51ms
#else
#define LOW_POWER_RESTORE_DELAY_TIME_HARDWARE            (0.20) //0.20ms,cpu 120M,flash 80M
#endif
#define LOW_POWER_XTAL_DPLL_STABILITY_DELAY_TIME  ((LOW_POWER_DPLL_STABILITY_DELAY_TIME+LOW_POWER_RESTORE_DELAY_TIME_HARDWARE)*1000)

#define LOW_POWER_26M_STABILITY_DELAY_TIME_HARDWARE      (CONFIG_PM_26M_STABILITY_DELAY_TIME_HARDWARE)
#define LOW_POWER_DELAY_TIME_HARDWARE                    (1300)
#define LOW_POWER_EXTERN_32K_HARDWARE                    (3000)

#define LOW_POWER_BOOTUP_RESTORE_TIME                    (1500)

#define PM_POWER_ON_ROSC_STABILITY_TIME                  (TIMER_CLOCK_FREQ_XTAL*2)//about 2ms

/*unit:32k clk cycles
  first delay version is base on following configration*/
#define PM_DEFAULT_LOW_VOLTAGE_WAKEUP1_DELAY 1
#define PM_DEFAULT_LOW_VOLTAGE_WAKEUP2_DELAY 1
#define PM_DEFAULT_LOW_VOLTAGE_WAKEUP3_DELAY 1

/*current used wakeup delay*/
#define PM_CURRENT_LOW_VOLTAGE_WAKEUP1_DELAY 11
#define PM_CURRENT_LOW_VOLTAGE_WAKEUP2_DELAY 11
#define PM_CURRENT_LOW_VOLTAGE_WAKEUP3_DELAY 11

/*delta between default and current,need to add to wifi wakeup delay*/
#define PM_LOW_VOLTAGE_DELTA_WAKEUP_DELAY (int32_t)(PM_CURRENT_LOW_VOLTAGE_WAKEUP1_DELAY +\
                                                    PM_CURRENT_LOW_VOLTAGE_WAKEUP2_DELAY +\
                                                    PM_CURRENT_LOW_VOLTAGE_WAKEUP3_DELAY -\
                                                    PM_DEFAULT_LOW_VOLTAGE_WAKEUP1_DELAY -\
                                                    PM_DEFAULT_LOW_VOLTAGE_WAKEUP2_DELAY -\
                                                    PM_DEFAULT_LOW_VOLTAGE_WAKEUP3_DELAY)

//ceil()
#define PM_LOW_VOLTAGE_DELTA_WAKEUP_DELAY_IN_US ((PM_LOW_VOLTAGE_DELTA_WAKEUP_DELAY*1000000+RTC_CLOCK_FREQ-1)/RTC_CLOCK_FREQ)

#define PM_CHIP_ID_HIGH_POS                              (16)
#define PM_CHIP_ID_MASK                                  (0xFFFF0000)
#define PM_CHIP_ID_MPW_V2                                (0x24400032)
#define PM_CHIP_ID_MPW_V3                                (0x24700030)
#define PM_CHIP_ID_MPW_V4                                (0x23A10810)
#define PM_CHIP_ID_MPW_V5                                (0x22400030)
#define PM_CHIP_ID_MP_A                                  (0x23640810)

#define PM_FREQUNCY_DIV_MAX                              (15)
#define PM_FREQUNCY_DIV_BUS_MAX                          (1)
#define PM_FREQUNCY_DIV_CPU_MAX                          (1)

#define PM_MODULE_SUB_POWER_DOMAIN_MAX                   (30)
#define WAKEUP_SOURCE_POSI                               (20)
#define WAKEUP_SOURCE_MARK                               (0x3)

typedef enum
{
	UART_CLK_DIV_1 = 0,
	UART_CLK_DIV_2,
	UART_CLK_DIV_4,
	UART_CLK_DIV_8,
}uart_clk_div_t;

typedef enum
{
	FLASH_CLK_DIV_4 = 0,
	FLASH_CLK_DIV_6,
	FLASH_CLK_DIV_8,
	FLASH_CLK_DIV_10,
}flash_clk_div_t;

typedef enum
{
	FLASH_CLK_XTAL = 0,
	FLASH_CLK_DPLL,
	FLASH_CLK_APLL,
}flash_clk_src_t;

/*clock power control start*/
typedef enum	//SYS TYPES index is from 1~X
{
	CLK_PWR_ID_I2C1 = 0,
	CLK_PWR_ID_SPI_1,
	CLK_PWR_ID_UART1,
	CLK_PWR_ID_PWM_1,
	CLK_PWR_ID_TIMER_1,
	CLK_PWR_ID_SARADC,
	CLK_PWR_ID_UART4,
	CLK_PWR_ID_GPIO,
	CLK_PWR_ID_I2C2,
	CLK_PWR_ID_SPI_2,
	CLK_PWR_ID_UART2,
	CLK_PWR_ID_UART3,
    CLK_PWR_ID_RESV12,
	CLK_PWR_ID_TIMER_2,
    CLK_PWR_ID_RESV14,
	CLK_PWR_ID_OTP,
	CLK_PWR_ID_I2S_1,
	CLK_PWR_ID_LED,
    CLK_PWR_ID_RESV18,
    CLK_PWR_ID_PSRAM,
	CLK_PWR_ID_DPLLDIV,
	CLK_PWR_ID_QSPI_1,
	CLK_PWR_ID_SDIO,
	CLK_PWR_ID_AUXS,
	CLK_PWR_ID_BTDM,
	CLK_PWR_ID_XVR,
	CLK_PWR_ID_MAC,
	CLK_PWR_ID_PHY,
	CLK_PWR_ID_THREAD,
	CLK_PWR_ID_RF,
    CLK_PWR_ID_RESV30,
	CLK_PWR_ID_WDG_CPU,
	CLK_PWR_ID_NONE,
    CLK_PWR_ID_PWM_2, // delete TODO wangzhilei
    CLK_PWR_ID_TIMER_3, //TODO wangzhilei
}dev_clk_pwr_id_t;

typedef enum
{
	CLK_PWR_CTRL_PWR_DOWN = 0,
	CLK_PWR_CTRL_PWR_UP,
}dev_clk_pwr_ctrl_t;

/*
clock select for periphral unit
*/
typedef enum
{
	CLK_SEL_ID_26M = 0,
	CLK_SEL_ID_WDT,
	CLK_SEL_ID_SPI0,
	CLK_SEL_ID_SPI1,
	CLK_SEL_ID_QSPI0,
	CLK_SEL_ID_QSPI1,
	CLK_SEL_ID_DISP,
	CLK_SEL_ID_PSRAM,
	CLK_SEL_ID_SDIO,
	CLK_SEL_ID_AUXS,
	CLK_SEL_ID_FLASH,
	CLK_SEL_ID_I2S,
	CLK_SEL_ID_CORE,
	CLK_SEL_ID_UART0,
	CLK_SEL_ID_UART1,
	CLK_SEL_ID_UART2,
	CLK_SEL_ID_SADC,
	CLK_SEL_ID_PWM0,
	CLK_SEL_ID_PWM1,
	CLK_SEL_ID_TIMER0,
	CLK_SEL_ID_TIMER1,
	CLK_SEL_ID_TIMER2,
	CLK_SEL_ID_AUDIO,
	CLK_SEL_ID_JPEG,
}dev_clk_select_id_t;

typedef enum
{
	CLK_SEL_DCO = 0,
	CLK_SEL_XTL_26M,
	CLK_SEL_32K,
	CLK_SEL_APLL,
	CLK_SEL_DPLL,
	CLK_SEL_320M,
	CLK_SEL_480M,
}dev_clk_select_t;

typedef enum
{
	CLK_DIV_1 = 1,
	CLK_DIV_2 = 2,
	CLK_DIV_4 = 4,
	CLK_DIV_6 = 6,
	CLK_DIV_8 = 8,
	CLK_DIV_10 = 10,
	CLK_DIV_12 = 12,
	CLK_DIV_16 = 16,
	CLK_DIV_32 = 32,
	CLK_DIV_64 = 64,
	CLK_DIV_256 = 256,
}dev_clk_div_t;

typedef enum
{
	CLK_DCO_DIV_1 = 0,
	CLK_DCO_DIV_2,
	CLK_DCO_DIV_4,
	CLK_DCO_DIV_8
}dev_clk_dco_div_t;


/*clock power control end*/

/*power domain ctrl modules*/
typedef enum
{
	POWER_MODULE_NAME_MEM1 = 0,
	POWER_MODULE_NAME_MEM2,
	POWER_MODULE_NAME_MEM3,
	POWER_MODULE_NAME_ENCP,
	POWER_MODULE_NAME_BAKP,
	POWER_MODULE_NAME_AHBP,         //5
	POWER_MODULE_NAME_AUDP,         //6
	POWER_MODULE_NAME_VIDP,         //7
	POWER_MODULE_NAME_BTSP,         //8
	POWER_MODULE_NAME_WIFIP_MAC,    //9
	POWER_MODULE_NAME_WIFI_PHY,     //10
	POWER_MODULE_NAME_MEM0,         //11
	POWER_MODULE_NAME_MEM4,         //12
	POWER_MODULE_NAME_OFDM,         //13
	POWER_MODULE_NAME_MEM5,         //14
	POWER_MODULE_NAME_THREAD = 14,         //14
	POWER_MODULE_NAME_ROM_PGEN,     //15
	POWER_MODULE_NAME_TCM1_PGEN,    //16
	POWER_MODULE_NAME_CPU1 ,        //17
	POWER_MODULE_NAME_APP ,         //18
	POWER_MODULE_NAME_CPU2 ,        //19
	POWER_MODULE_NAME_NONE          //20
}power_module_name_t;

typedef enum
{
	POWER_SUB_MODULE_NAME_BAKP_TIMER1  = POWER_MODULE_NAME_BAKP*PM_MODULE_SUB_POWER_DOMAIN_MAX ,
	POWER_SUB_MODULE_NAME_BAKP_UART1 ,
	POWER_SUB_MODULE_NAME_BAKP_UART2 ,
	POWER_SUB_MODULE_NAME_BAKP_SPI1 ,
	POWER_SUB_MODULE_NAME_BAKP_I2C0 ,
	POWER_SUB_MODULE_NAME_BAKP_I2C1 ,
	POWER_SUB_MODULE_NAME_BAKP_SADC ,
	POWER_SUB_MODULE_NAME_BAKP_PWM1 ,
	POWER_SUB_MODULE_NAME_BAKP_PWM0 ,
	POWER_SUB_MODULE_NAME_BAKP_TRNG ,
	POWER_SUB_MODULE_NAME_BAKP_IRDA ,
	POWER_SUB_MODULE_NAME_BAKP_SDIO ,
	POWER_SUB_MODULE_NAME_BAKP_COMSEG ,
	POWER_SUB_MODULE_NAME_BAKP_DMA0 ,
	POWER_SUB_MODULE_NAME_BAKP_DMA1 ,
	POWER_SUB_MODULE_NAME_BAKP_LA ,
	POWER_SUB_MODULE_NAME_BAKP_UART3 ,
	POWER_SUB_MODULE_NAME_BAKP_I2S ,
	POWER_SUB_MODULE_NAME_BAKP_LEDC ,
	POWER_SUB_MODULE_NAME_BAKP_QSPI1 ,
	POWER_SUB_MODULE_NAME_BAKP_PSRAM ,
	POWER_SUB_MODULE_NAME_BAKP_PM ,
	POWER_SUB_MODULE_NAME_BAKP_NONE
}power_sub_module_name_bakp_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_ENCP_OTP  = POWER_SUB_MODULE_NAME_BAKP_NONE ,
	POWER_SUB_MODULE_NAME_ENCP_TRUSTENGINE ,
	POWER_SUB_MODULE_NAME_ENCP_NONE
}power_sub_module_name_encp_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_AUDP_FFT  = POWER_MODULE_NAME_AUDP*PM_MODULE_SUB_POWER_DOMAIN_MAX ,
	POWER_SUB_MODULE_NAME_AUDP_SBC ,
	POWER_SUB_MODULE_NAME_AUDP_AUDIO ,
	POWER_SUB_MODULE_NAME_AUDP_I2S ,
	POWER_SUB_MODULE_NAME_AUDP_NONE
}power_sub_module_name_audp_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_VIDP_JPEG_EN = POWER_MODULE_NAME_VIDP*PM_MODULE_SUB_POWER_DOMAIN_MAX,
	POWER_SUB_MODULE_NAME_VIDP_JPEG_DE ,
	POWER_SUB_MODULE_NAME_VIDP_DMA2D ,
	POWER_SUB_MODULE_NAME_VIDP_LCD ,
	POWER_SUB_MODULE_NAME_VIDP_YUVBUF ,
	POWER_SUB_MODULE_NAME_VIDP_ROTT ,
	POWER_SUB_MODULE_NAME_VIDP_SCAL0 ,
	POWER_SUB_MODULE_NAME_VIDP_SCAL1 ,
	POWER_SUB_MODULE_NAME_VIDP_H264 ,

	POWER_SUB_MODULE_NAME_VIDP_NONE
}power_sub_module_name_vidp_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_BTSP = POWER_MODULE_NAME_BTSP*PM_MODULE_SUB_POWER_DOMAIN_MAX ,
	POWER_SUB_MODULE_NAME_BTSP_NONE
}power_sub_module_name_btsp_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_THREAD = POWER_SUB_MODULE_NAME_BTSP_NONE ,
	POWER_SUB_MODULE_NAME_THREAD_NONE
}power_sub_module_name_thread_e;
typedef enum
{
	POWER_SUB_MODULE_NAME_PHY_BT = POWER_MODULE_NAME_WIFI_PHY*PM_MODULE_SUB_POWER_DOMAIN_MAX ,
	POWER_SUB_MODULE_NAME_PHY_WIFI ,
	POWER_SUB_MODULE_NAME_PHY_RF ,
	POWER_SUB_MODULE_NAME_PHY_THREAD ,
	POWER_SUB_MODULE_NAME_PHY_NONE
}power_sub_module_name_phy_e;

typedef enum
{
	POWER_SUB_MODULE_NAME_AHBP_PSRAM = POWER_SUB_MODULE_NAME_BAKP_PSRAM,
	POWER_SUB_MODULE_NAME_AHBP_NONE
}power_sub_module_name_ahbp_e;

typedef enum
{
	POWER_MODULE_STATE_ON = 0,
    POWER_MODULE_STATE_OFF,
	POWER_MODULE_STATE_NONE
}power_module_state_t;
typedef enum
{
	POWER_MODULE_STATE_LOWVOL_ON = 0,
    POWER_MODULE_STATE_LOWVOL_OFF,
	POWER_MODULE_STATE_LOWVOL_NONE
}lowvol_module_state_t;
typedef enum
{
	ENTER_DEEP_SLEEP_DISABLE = 0,
    ENTER_DEEP_SLEEP_ENABLE,
	ENTER_DEEP_SLEEP_NONE
}enter_deepsleep_state_t;
typedef enum
{
	ENTER_LOW_VOLTAGE_DISABLE = 0,
    ENTER_LOW_VOLTAGE_ENABLE,
	ENTER_LOW_VOLTAGE_NONE
}enter_lowvoltage_state_t;

/*RF using owner modules*/
typedef enum
{
    MODULE_NAME_WIFI = 0,
	MODULE_NAME_BT,
	MODULE_NAME_NONE
}module_name_t;
typedef enum
{
	HIGH_FREQUECY_CLOCK_MODULE_CPU0 = 0,
	HIGH_FREQUECY_CLOCK_MODULE_CPU1,
	HIGH_FREQUECY_CLOCK_MODULE_CPU0_MATRIX,
	HIGH_FREQUECY_CLOCK_MODULE_CPU1_MATRIX,
	HIGH_FREQUECY_CLOCK_MODULE_SDIO,
	HIGH_FREQUECY_CLOCK_MODULE_QSPI,
	HIGH_FREQUECY_CLOCK_MODULE_PSRAM,
	HIGH_FREQUECY_CLOCK_MODULE_DISP,
	HIGH_FREQUECY_CLOCK_MODULE_JPEG,
	HIGH_FREQUECY_CLOCK_MODULE_FLASH,
	HIGH_FREQUECY_CLOCK_MODULE_USB,
	HIGH_FREQUECY_CLOCK_MODULE_NONE
}high_clock_module_name_t;
typedef enum
{
	WAKEUP_SOURCE_INT_GPIO = 0,
	WAKEUP_SOURCE_INT_RTC ,
	WAKEUP_SOURCE_INT_WIFI ,
	WAKEUP_SOURCE_INT_BT ,
	WAKEUP_SOURCE_INT_TOUCHED ,
	WAKEUP_SOURCE_INT_USBPLUG ,
	WAKEUP_SOURCE_INT_NONE ,
}wakeup_source_t;

typedef enum
{
	CHARGE_STEP1 = 0,
	CHARGE_STEP2,
	CHARGE_STEP3,
	CHARGE_STEP4,
} sys_drv_charge_step_t;
typedef enum
{
	ANALOG_REG0 = 0,
	ANALOG_REG1,
	ANALOG_REG2,
	ANALOG_REG3,
	ANALOG_REG4,
	ANALOG_REG5,
	ANALOG_REG6,
    ANALOG_REG7,
	ANALOG_REG8,
	ANALOG_REG9,
	ANALOG_REG10,
	ANALOG_REG11,
	ANALOG_REG12,
	ANALOG_REG13,
    ANALOG_REG14,
	ANALOG_REG15,
	ANALOG_REG16,
	ANALOG_REG17,
	ANALOG_REG18,
	ANALOG_REG19,
	ANALOG_REG20,
	ANALOG_REG21,
	ANALOG_REG22,
	ANALOG_REG23,
	ANALOG_REG24,
	ANALOG_REG25,
	ANALOG_REG26,
	ANALOG_REG27,
	ANALOG_MAX
} analog_reg_t;

typedef enum
{
	CLK_DIV_REG0 = 0,
	CLK_DIV_REG1,
	CLK_DIV_REG2,
	CLK_DIV_NONE
} clk_div_reg_e;
#define CLK_DIV_ADDRESS_MAP  \
{	\
	{CLK_DIV_REG0, SYS_CPU_CLK_DIV_MODE1_ADDR, }, \
	{CLK_DIV_REG1, SYS_CPU_CLK_DIV_MODE2_ADDR, }, \
	{CLK_DIV_REG2, SYS_CPU_26M_WDT_CLK_DIV_ADDR, }, \
}
typedef struct {
	clk_div_reg_e clk_div_reg;
	uint32_t reg_address;
} clk_div_address_map_t;
typedef enum
{
	PMU_REG0 = 0,
	PMU_REG2,
	PMU_REG0x25,
	PMU_REG0x40,
	PMU_REG0x41,
	PMU_REG0x43,
	PMU_REG0x71,
	PMU_REG0x72,
	PMU_REG0x73,
	PMU_REG0x77,
	PMU_REG0x78,
	PMU_REG0x79,
	PMU_REG0x7c,
	PMU_REG0x7d,
	PMU_REG0x7e,
	PMU_REG0x7f,
	PMU_NONE
} pmu_reg_e;
#define PMU_ADDRESS_MAP  \
{	\
	{PMU_REG0, AON_PMU_R0_ADDR, }, \
	{PMU_REG2, AON_PMU_R2_ADDR, }, \
	{PMU_REG0x25, AON_PMU_R25_ADDR, }, \
	{PMU_REG0x40, AON_PMU_R40_ADDR, }, \
	{PMU_REG0x41, AON_PMU_R41_ADDR, }, \
	{PMU_REG0x43, AON_PMU_R43_ADDR, }, \
	{PMU_REG0x71, AON_PMU_R71_ADDR, }, \
	{PMU_REG0x72, AON_PMU_R72_ADDR, }, \
	{PMU_REG0x73, AON_PMU_R73_ADDR, }, \
	{PMU_REG0x77, AON_PMU_R77_ADDR, }, \
	{PMU_REG0x78, AON_PMU_R78_ADDR, }, \
	{PMU_REG0x79, AON_PMU_R79_ADDR, }, \
	{PMU_REG0x7c, AON_PMU_R7C_ADDR, }, \
	{PMU_REG0x7d, AON_PMU_R7D_ADDR, }, \
	{PMU_REG0x7e, AON_PMU_R7E_ADDR, }, \
	{PMU_REG0x7f, AON_PMU_R7F_ADDR, }, \
}
typedef struct {
	pmu_reg_e pmu_reg;
	uint32_t reg_address;
}pmu_address_map_t;


typedef enum
{
    BIT_SLEEP_FLAG_DEEP_SLEEP    = 16,
    BIT_SLEEP_FLAG_LOW_VOLTAGE      ,
    BIT_SLEEP_FLAG_NONE
} bit_sleep_flag_e;

typedef enum
{
    SARADC_CLK_SRC_XTAL = 0,
    SARADC_CLK_SRC_APLL,
    SARADC_CLK_SRC_UNKNOW = 0xff
} sys_saradc_clk_sel_t;

typedef enum
{
    SPI_CLK_SRC_XTAL = 0,
    SPI_CLK_SRC_APLL,
    SPI_CLK_SRC_UNKNOW = 0xff
} sys_spi_clk_sel_t;

typedef enum
{
    PWM_CLK_SRC_32K = 0,
    PWM_CLK_SRC_XTAL,
    PWM_CLK_SRC_UNKNOW = 0xff
} sys_pwm_clk_sel_t;

typedef enum
{
	LOW_POWER_MODE_NORMAL_SLEEP = 0,
	LOW_POWER_MODE_LOW_VOLTAGE ,
	LOW_POWER_DEEP_SLEEP ,
	LOW_POWER_MODE_NONE
}low_power_sleep_mode_e;

typedef enum
{
	QSPI_CLK_320M = 0,
	QSPI_CLK_480M,
	QSPI_CLK_XTAL,
	QSPI_CLK_60M,
	QSPI_CLK_80M,
} sys_qspi_clk_src_t;

typedef enum
{
	RF_CTRL_PTA = 0,
	RF_CTRL_WIFI,
	RF_CTRL_BT,
	RF_CTRL_THREAD,
}rf_ctrl_t;

typedef enum _dco_speed
{
	DCO_CALIB_SPEED_26M,
	DCO_CALIB_SPEED_60M,
	DCO_CALIB_SPEED_80M,
	DCO_CALIB_SPEED_120M,
	DCO_CALIB_SPEED_240M,
	DCO_CALIB_SPEED_320M,
	DCO_CALIB_SPEED_480M,
}dco_cali_speed_e;
#ifdef __cplusplus
}
#endif
