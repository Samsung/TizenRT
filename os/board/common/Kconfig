#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

config ARCH_BOARD_HAVE_FLASH
	bool
	default n
	---help---
		This shows the board has the flash and enables to use.
		This is enabled by board config.

if ARCH_BOARD_HAVE_FLASH && (NFILE_DESCRIPTORS != 0)
comment "Board-Partition Options"

config FLASH_PARTITION
	bool "Enable partition support on FLASH"
	default n
	select MTD
	select MTD_PARTITION
	---help---
		Enables creation of partitions on the FLASH

if FLASH_PARTITION

config FLASH_MINOR
	int "Minor number for the FLASH device"
	default 0
	---help---
		Sets the minor number for /dev node of the external flash
		device.

config FLASH_PART_SIZE
	string "Flash partition size list (in KBytes)"
	default "16,48,192,32,512,2400,1536,1536,1400,8,512," if !BUILD_PROTECTED
	default "16,48,192,32,512,1200,1200,1536,1536,1400,8,512," if BUILD_PROTECTED
	---help---
		Comma separated list of partition sizes in KB.

config FLASH_PART_TYPE
	string "Flash partition type list"
	default "none,none,none,none,none,none,none,none,smartfs,config,none," if !BUILD_PROTECTED
	default "none,none,none,none,none,none,none,none,none,smartfs,config,none," if BUILD_PROTECTED
	---help---
		Comma separated list of partition types that can be one of
		followings: none, smartfs, config

config FLASH_PART_NAME
	string "Flash partition name list"
	default "bl1,sssro,bl2,sssfw,wlanfw,os,factory,ota,user,nvram,sssrw," if !BUILD_PROTECTED
	default "bl1,sssro,bl2,sssfw,wlanfw,os,apps,factory,ota,user,nvram,sssrw," if BUILD_PROTECTED
	depends on MTD_PARTITION_NAMES
	---help---
		Comma separated list of partition names.

endif # FLASH_PARTITION
endif # ARCH_BOARD_HAVE_FLASH && (NFILE_DESCRIPTORS != 0)

config ARCH_BOARD_HAVE_SECOND_FLASH
	bool
	default n
	---help---
		This shows the board has the second flash and enables to use.
		This is enabled by board config.

if ARCH_BOARD_HAVE_SECOND_FLASH && (NFILE_DESCRIPTORS != 0)
comment "Second Flash Partition Options"

config SECOND_FLASH_PARTITION
	bool "Enable partition support on Second FLASH"
	default n
	select MTD
	select MTD_PARTITION
	---help---
		Enables creation of partitions on the Second FLASH

if SECOND_FLASH_PARTITION

config SECOND_FLASH_MINOR
	int "Minor number for the FLASH device"
	default 1
	---help---
		Sets the minor number for /dev node of the second flash
		device.

config SECOND_FLASH_PART_SIZE
	string "Flash partition size list (in KBytes)"
	default "512,2048,"
	---help---
		Comma separated list of partition sizes in KB.

config SECOND_FLASH_PART_TYPE
	string "Flash partition type list"
	default "kernel,smartfs," if APP_BINARY_SEPARATION
	default "none,smartfs," if !APP_BINARY_SEPARATION
	---help---
		Comma separated list of partition types that can be one of
		followings: none, kernel, smartfs, romfs, ftl, config

config SECOND_FLASH_PART_NAME
	string "Flash partition name list"
	default "kernel,userfs,"
	depends on MTD_PARTITION_NAMES
	---help---
		Comma separated list of partition names.

endif # SECOND_FLASH_PARTITION
endif # ARCH_BOARD_HAVE_SECOND_FLASH && (NFILE_DESCRIPTORS != 0)

config AUTOMOUNT
	bool "Automount partitions"
	default n
	depends on FLASH_PARTITION
	depends on !DISABLE_MOUNTPOINT
	---help---
		If enabled, mount userfs or romfs partition automatically at boot.

config AUTOMOUNT_USERFS
	bool "Automount userfs partition"
	default n
	depends on AUTOMOUNT
	depends on FS_SMARTFS
	---help---
		If enabled, mount userfs partition automatically at boot.
		The device name of the partition will be set like "/dev/smart0pX"
		for user r/w file system.
		When SMARTFS_MULTI_ROOT_DIRS is enabled the device name
		will be appended by "d1" (/dev/smart0pxd1).

config AUTOMOUNT_ROMFS
	bool "Automount romfs partition"
	default n
	depends on AUTOMOUNT
	depends on FS_ROMFS
	---help---
		If enabled, mount romfs partition automatically at boot.

config BOARD_ENTROPY_POOL
        bool "Enable Board level storing of entropy pool structure"
        default n
        depends on CRYPTO_RANDOM_POOL
        ---help---
                Entropy pool structure can be provided by board source.
                Use for this is, for example, to allocate entropy pool
                from special area of RAM which content is kept over
                system reset.

config BOARD_INITRNGSEED
        bool "Enable Board level initial seeding of entropy pool RNG"
        default n
        depends on CRYPTO_RANDOM_POOL
        ---help---
                If enabled, entropy pool random number generator will call
                board_init_rndseed() upon initialization. This function
                can then provide early entropy seed to the pool through
                entropy injection APIs provided at 'nuttx/random.h'.

config BOARD_USBDEV_SERIALSTR
        bool
        default n

