#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

config MM_KERNEL_HEAP
	bool
	default y

config REALLOC_DISABLE_NEIGHBOR_EXTENSION
	bool "Disable Realloc Neighbor Extension"
	default n
	---help---
		If enabled, realloc will not expand from old node to neighbor freenode.
		Instead, realloc will do "malloc new node, memcpy, free old node" which is safe,
		but waste of time and memory space. And it will be one of debugging
		features, especially when you modify existing malloc/free logic.

config MM_SMALL
	bool "Small memory model"
	default n
	---help---
		Each memory allocation has a small allocation overhead.  The size
		of that overhead is normally determined by the "width" of the
		address support by the MCU.  MCUs that support 16-bit addressability
		have smaller overhead than devices that support 32-bit addressability.
		However, there are many MCUs that support 32-bit addressability *but*
		have internal SRAM of size less than or equal to 64Kb.  In this case,
		MM_SMALL can be defined so that those MCUs will also benefit
		from the smaller, 16-bit-based allocation overhead.

		WARNING:  This selection will also change the alignment of allocated
		memory.  For example, on ARM memory will have 8-byte alignment by
		default.  If MM_SMALL is selected, then allocated memory will have
		only 4-byte alignment.  This may be important on some platforms where
		64-bit data is in allocated structures and 8-byte alignment is required.

config KMM_REGIONS
	int "Number of kernel memory regions"
	default 1
	---help---
		If the architecture includes multiple, non-contiguous regions of
		memory to allocate from, KMM_REGIONS should be set to the number of
		memory. Or if you want to use multiple kernel heap, KMM_REGIONS
		should be set to the number of heaps.

config KMM_NHEAPS
	int "Number of kernel heaps"
	default 1
	---help---
		A number of kernel heap memory. If KMM_NHEAPS sets more than equal to 2,
		it can be split for multi kernel heap.
		You can refer to "https://github.com/Samsung/TizenRT/blob/master/docs/HowToUseMultiHeap.md"

config KMM_FORCE_ALLOC_AT
	bool "Force to alloc at specific mm heap for kernel"
	default n
	depends on KMM_NHEAPS != 1
	depends on MM_KERNEL_HEAP
	---help---
		When Enable multi heap, it's possible that need to alloc memory from
		specific heap for kernel

config KMM_FORCE_ALLOC_IDX
	int "Heap index for kernel memory"
	default 0
	depends on KMM_FORCE_ALLOC_AT
	---help---
		Index of the heap that need to alloc for kernel forcedly

config GRAN
	bool "Enable Granule Allocator"
	default n
	---help---
		Enable granule allocator support.  Allocations will be aligned to the
		granule size; allocations will be in units of the granule size.
		Larger granules will give better performance and less overhead but
		more losses of memory due to alignment and quantization waste.

		NOTE: The current implementation also restricts the maximum
		allocation size to 32 granaules.  That restriction could be
		eliminated with some additional coding effort.

config GRAN_SINGLE
	bool "Single Granule Allocator"
	default n
	depends on GRAN
	---help---
		Select if there is only one instance of the granule allocator (i.e.,
		gran_initialize will be called only once. In this case, (1) there
		are a few optimizations that can can be done and (2) the GRAN_HANDLE
		is not needed.

config GRAN_INTR
	bool "Interrupt level support"
	default n
	depends on GRAN
	---help---
		Normally mutual exclusive access to granule allocator data is assured
		using a semaphore.  If this option is set then, instead, mutual
		exclusion logic will disable interrupts.  While this options is more
		invasive to system performance, it will also support use of the granule
		allocator from interrupt level logic.

config DEBUG_GRAN
	bool "Granule Allocator Debug"
	default n
	depends on GRAN && DEBUG
	---help---
		Just like DEBUG_MM, but only generates output from the gran
		allocation logic.

config MM_PGALLOC
	bool "Enable Page Allocator"
	default n
	depends on ARCH_USE_MMU
	select GRAN
	---help---
		Enable support for a MMU physical page allocator based on the
		granule allocator.

if MM_PGALLOC

config MM_PGSIZE
	int "Page Size"
	default 4096
	---help---
		The MMU page size.  Must be one of {1024, 2048, 4096, 8192, or
		16384}.  This is easily extensible, but only those values are
		currently support.

config DEBUG_PGALLOC
	bool "Page Allocator Debug"
	default n
	depends on DEBUG
	---help---
		Just like DEBUG_MM, but only generates output from the page
		allocation logic.

endif # MM_PGALLOC

config MM_SHM
	bool "Shared memory support"
	default n
	depends on MM_PGALLOC && BUILD_KERNEL && EXPERIMENTAL
	---help---
		Build in support for the shared memory interfaces shmget(), shmat(),
		shmctl(), and shmdt().

config MM_ASSERT_ON_FAIL
	bool "Assertion when Memory allocation fail"
	default y
	select MMINFO if APP_BINARY_SEPARATION
	---help---
		When memory allocation fails, make assertion.
		From the application binary with loadable build, it will be reloaded.

config MM_DUMP_CORRPUTED_HEAP
	bool "Dump the complete corrupted heap"
	default n
	---help---
		When we find a heap corruption, we can dump the entire heap, so that
		it can be manually analyzed to find more information about the corruption.

