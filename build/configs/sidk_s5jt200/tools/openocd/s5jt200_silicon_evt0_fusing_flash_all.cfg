###########################################################################
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################

# OpenOCD config used to write firmware to
# S5J internal flash memory via FTDI
# USB FT2232H (SIDK S5JT200 Board)

#daemon configuration
telnet_port 4444
gdb_port 3333

#interface
interface ftdi
ftdi_vid_pid 0x0403 0x6010

ftdi_layout_init 0x0008 0x000b
ftdi_layout_signal nTRST -data 0x0200 -oe 0x0200
ftdi_layout_signal nSRST -data 0x0080 -oe 0x0080

reset_config trst_and_srst srst_push_pull trst_push_pull

source [find partition_map.cfg]
set _CHIPNAME s5jt200
set _ENDIAN little
set _CPUTAPID 0x4BA00477

adapter_khz 2000

# jtag scan chain
set _ARM_CR4_JTAGID1 0x3ba00477
set _ARM_CR4_JTAGID2 0x4ba00477
set _ARM_CR4_JTAGID3 0x5ba00477

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu

target create $_TARGETNAME cortex_r4 -endian $_ENDIAN -chain-position $_TARGETNAME -dbgbase 0x801E0000

proc jtag_init {} {
	debug_level -1 
	global _TARGETNAME
	jtag_reset 0 0
	jtag arp_init
	$_TARGETNAME arp_examine
	reset halt
	wdt_disable
	cmu_init
	enable_region
	flash_init
	#flash_erase_all
	flash_chiperase
	#set scriptDir [ getScriptDirectory ]
	fusing_image_all
	reset
	shutdown
}

proc s5j_set_ft2232_serial { arg1 } {
	echo "----------------------------------------------------------------------"
	echo "set serial number $arg1"
	echo "----------------------------------------------------------------------"	
	ft2232_serial $arg1	
}


proc cmu_init {} {
	echo "----------------------------------------------------------------------"
	echo "CMU initialize"
	echo "----------------------------------------------------------------------"
	mww 0x80081818 0x00000002
	mww 0x8008181c 0x00000001
	mww 0x80081814 0x00000001
	mww 0x80081804 0x00000000
	mww 0x80081808 0x00000000
	mww 0x8008180c 0x00000000
	mww 0x80081810 0x00000000
	mww 0x80081800 0x00000003
	mww 0x80080000 0x007f0000
	mww 0x80080004 0x03104000
	mww 0x80080014 0x1071bf00
	mww 0x80081000 0x00000000
	mww 0x8008100c 0x00000000
	mww 0x80080180 0x00000010
	echo "Done"
}

proc wdt_disable {} {
	echo "----------------------------------------------------------------------"
	echo "DISABLE Watchdog reset"
	echo "----------------------------------------------------------------------"
	mww 0x80030000 0x00000000
	echo "Done"
}

proc enable_region {} {
	echo "----------------------------------------------------------------------"
	echo "Region enable"
	echo "----------------------------------------------------------------------"
#initialize mpu setting
	arm mcr 15 0 6 2 0 0x0
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x1
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x2
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x3
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x4
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x5
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x6
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x7
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x8
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0x9
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0xA
	arm mcr 15 0 6 1 2 0x8
	arm mcr 15 0 6 2 0 0xB
	arm mcr 15 0 6 1 2 0x8	
	
	
	arm mcr 15 0 6 2 0 0x0
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x0
	
	arm mcr 15 0 6 2 0 0x4
	arm mcr 15 0 6 1 4 0x300
	arm mcr 15 0 6 1 2 0x3F
	arm mcr 15 0 6 1 0 0x04000000
	
	arm mcr 15 0 1 0 0 0x00e50879
	echo "Done"
	
	
}

proc flash_init {} {
	echo "----------------------------------------------------------------------"
	echo "SFlash initialize"
	echo "----------------------------------------------------------------------"
	mww	0x80040020 0x00222222
	mww	0x80040028 0x00333333
	sleep 100
	mww	0x80310004 0x8010000A
	echo "Done"
}

proc flash_chiperase {} {
	echo "----------------------------------------------------------------------"
	echo "SFlash Chiperase(Entire flash)"
	echo "----------------------------------------------------------------------"
	mwb 0x803100CE 0xFF
	
	flash_erase_wait_echo_sec
	echo "Done"
}

proc flash_erase_all {} {
	echo "----------------------------------------------------------------------"
	echo "Flash erase"
	echo "----------------------------------------------------------------------"
	flash_erase_boot
	flash_erase_os
	flash_erase_sss
	flash_erase_wlan
	echo "Done"
}

proc flash_erase_boot {} {
	echo "erase bootloader in flash"
	flash_erase 0x04000000 0x4000
}

proc flash_erase_os {} {
	echo "erase flash 3MB for tinyara_head.bin, check bin size"
	flash_erase 0x0400C000 0x2F8000
}

proc flash_erase_sss {} {
	echo "erase SSS F/W region"
	flash_erase 0x042FC000 0x8000
}

proc flash_erase_wlan {} {
	echo "erase WLAN F/W region"
	flash_erase 0x04304000 0x80000
}

proc flash_erase {write_addr write_size} {
	global flash_write_addr flash_base target_addr end_addr
	set flash_write_addr $write_addr
	set flash_base 0x04000000
	set target_addr [expr $flash_write_addr-$flash_base]
	set end_addr [expr $target_addr+$write_size]
	while {$target_addr<$end_addr} {
		mww 0x80310010 $target_addr
		mwb 0x8031005E 0xff
		set target_addr [expr $target_addr+0x1000]
		flash_erase_wait
	}
}

proc flash_erase_wait {} {
	set SFLASH_RDSR	0x803100dc
	while {[expr [mrb $SFLASH_RDSR] & 0x01] != 0} {sleep 1}
}

proc flash_erase_wait_echo_sec {} {
	set SFLASH_RDSR	0x803100dc
	global count
	set count 0
	while {[expr [mrb $SFLASH_RDSR] & 0x01] != 0} {
		sleep 1000
		set count [expr $count+1]
		echo "please wait ($count)sec"
	}
}

# mrw: "memory read word", returns value of $reg
proc mrw {reg} {
	set value ""
	mem2array value 32 $reg 1
	return $value(0)
}

# mrb: "memory read byte", returns value of $reg
proc mrb {reg} {
	set value ""
	mem2array value 8 $reg 1
	return $value(0)
}

proc getScriptDirectory {} {
	set dispScriptFile [file normalize [info script]]
	set scriptFolder [file dirname $dispScriptFile]
	return $scriptFolder
}

proc fusing_image_all {} {
	fusing_image_boot
	fusing_image_os
	fusing_image_sss
	fusing_image_wlan
	fusing_image_romfs
}

proc fusing_image_boot {} {
	echo "----------------------------------------------------------------------"
	echo "Fusing nBL1"
	echo "----------------------------------------------------------------------"
	set BL1_PATH "../../boot_bin/t20.nbl1.bin"
	load_image $BL1_PATH 0x04000000
	echo "Done"

	echo "----------------------------------------------------------------------"
	echo "Fusing BL2"
	echo "----------------------------------------------------------------------"
	set BL2_PATH "../../boot_bin/t20.bl2.head.bin"
	load_image $BL2_PATH 0x04010000
	
	echo "Done"
}

proc fusing_image_os {} {
	echo "----------------------------------------------------------------------"
	echo "Fusing Tinyara"
	echo "----------------------------------------------------------------------"
	set OS_PATH "../../../../../build/output/bin/kernel_sidk_s5jt200.trpk"
	load_image $OS_PATH 0x040C8000
	echo "Done"
}

proc fusing_image_sss {} {
	echo "----------------------------------------------------------------------"
	echo "Fusing SSS F/W..(size under 32KB)"
	echo "----------------------------------------------------------------------"
	set SSS_PATH "../../boot_bin/t20.sss.fw.bin"
	load_image $SSS_PATH 0x04040000
	echo "Done"
}

proc fusing_image_wlan {} {
	echo "----------------------------------------------------------------------"
	echo "Fusing WLAN F/W.."
	echo "----------------------------------------------------------------------"
	set WLAN_PATH "../../boot_bin/t20.wlan.bin"
	load_image $WLAN_PATH 0x04048000
	echo "Done"
}

proc fusing_image_romfs {} {
	global romfs_partition_enable
	if { $romfs_partition_enable == 1 } {
		echo "----------------------------------------------------------------------"
		echo "Fusing ROMFS Image.."
		echo "----------------------------------------------------------------------"
		set ROMFS_IMG_PATH "../../../../../build/output/bin/romfs.img"
		global rom_part_start
		load_image $ROMFS_IMG_PATH $rom_part_start
		echo "Done"
	}
}
